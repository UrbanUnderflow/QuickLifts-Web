"use strict";exports.id=284,exports.ids=[284],exports.modules={9284:(e,t,r)=>{r.a(e,async(e,a)=>{try{r.d(t,{G:()=>p});var o=r(1492),s=r(9777),i=r(8157),n=r(6738),d=r(2069),l=r(3592),c=r(2286),u=r(3171),g=e([o,s,i]);[o,s,i]=g.then?(await g)():g;class h{get currentWorkout(){return this._currentWorkout}set currentWorkout(e){this._currentWorkout=e}get currentWorkoutLogs(){return this._currentWorkoutLogs}set currentWorkoutLogs(e){this._currentWorkoutLogs=e}async fetchCurrentWorkout(e){return(await this.fetchCurrentWorkoutSession(e)).workout}async getAllSweatlists(e){if(!e)throw Error("User ID is required");let t=(0,o.collection)(s.db,"users",e,"MyCreatedWorkouts");try{let r=await this.fetchAndMapExercisesWithVideos(),a=await (0,o.getDocs)(t),i=[];for(let t of a.docs){let a=t.data(),n=t.id,l=(a.exercises||[]).map(e=>{let t=r.find(t=>t.name===e.exercise.name);return console.log("This is the mapped exercise: "+t),{...e,exercise:t||e}}),c=new d.oQ({id:a.id||"",roundWorkoutId:a.roundWorkoutId||"",collectionId:a.collectionId,exercises:l,challenge:a.challenge,logs:[],title:a.title||"",description:a.description||"",duration:a.duration||0,workoutRating:a.workoutRating,useAuthorContent:a.useAuthorContent||!1,isCompleted:a.isCompleted||!1,workoutStatus:a.workoutStatus||"notStarted",startTime:a.startTime?new Date(a.startTime):void 0,order:a.order,author:a.author||e,createdAt:a.createdAt?new Date(a.createdAt):new Date,updatedAt:a.updatedAt?new Date(a.updatedAt):new Date,zone:a.zone||"FULL_BODY"}),u=(0,o.collection)(s.db,"users",e,"MyCreatedWorkouts",n,"logs"),g=await (0,o.getDocs)(u);c.logs=g.docs.map(e=>({...e.data(),id:e.id})),i.push(c)}return i}catch(e){throw console.error("Error fetching sweatlists:",e.message),Error("Failed to fetch sweatlists")}}async fetchWorkoutSummaries(e){let t=i.W4.currentUser;if(!t?.id)throw Error("No user is signed in");let r=(0,l.WU)(e,"MM-dd-yyyy"),a=(0,o.collection)(s.db,"users",t.id,"workoutSummaries"),n=(0,o.query)(a,(0,o.where)("date","==",r));try{return(await (0,o.getDocs)(n)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching workout summaries:",e.message),Error(e.message)}}async fetchAllWorkoutSummaries(){let e=i.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,o.collection)(s.db,"users",e.id,"workoutSummary"),r=(0,o.query)(t,(0,o.orderBy)("createdAt","asc"));try{return(await (0,o.getDocs)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching all workout summaries:",e.message),Error(e.message)}}async fetchUserChallengesByUserId(e){let t=(0,o.collection)(s.db,"user-challenge"),r=(0,o.query)(t,(0,o.where)("userId","==",e));try{return(await (0,o.getDocs)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new d.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new d.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:(0,c.C9)(t.createdAt),updatedAt:(0,c.C9)(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by userId:",e),e}}async fetchCollectionWithSweatLists(e){try{let t=await this.getCollectionById(e),r=[];for(let e of t.sweatlistIds||[])try{let[t]=await this.fetchSavedWorkout(e.sweatlistAuthorId,e.id);t&&r.push(t)}catch(t){console.error(`Error fetching workout ${e.id}:`,t)}return{collection:t,sweatLists:r}}catch(e){throw console.error("Error fetching collection with sweat lists:",e),e}}parseWorkoutData(e){return new d.oQ({id:e.id||"",roundWorkoutId:e.roundWorkoutId||"",collectionId:e.collectionId||[],exercises:e.exercises||[],challenge:e.challenge?new d.tv({id:e.challenge.id,title:e.challenge.title,subtitle:e.challenge.subtitle,participants:e.challenge.participants||[],status:e.challenge.status,startDate:e.challenge.startDate instanceof Date?e.challenge.startDate:e.challenge.startDate?new Date(e.challenge.startDate):new Date,endDate:e.challenge.endDate instanceof Date?e.challenge.endDate:e.challenge.endDate?new Date(e.challenge.endDate):new Date,createdAt:e.challenge.createdAt instanceof Date?e.challenge.createdAt:e.challenge.createdAt?new Date(e.challenge.createdAt):new Date,updatedAt:e.challenge.updatedAt instanceof Date?e.challenge.updatedAt:e.challenge.updatedAt?new Date(e.challenge.updatedAt):new Date,introVideos:(e.challenge.introVideos||[]).map(e=>new d.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,logs:e.logs||[],title:e.title||"",description:e.description||"",duration:e.duration||0,workoutRating:e.workoutRating,useAuthorContent:e.useAuthorContent||!1,isCompleted:e.isCompleted||!1,workoutStatus:e.workoutStatus||d.Z0.QueuedUp,startTime:e.startTime instanceof Date?e.startTime:e.startTime?new Date(e.startTime):void 0,order:e.order||0,author:e.author||"",createdAt:e.createdAt instanceof Date?e.createdAt:"function"==typeof e.createdAt?.toDate?e.createdAt.toDate():e.createdAt?new Date(e.createdAt):new Date,updatedAt:e.updatedAt instanceof Date?e.updatedAt:"function"==typeof e.updatedAt?.toDate?e.updatedAt.toDate():e.updatedAt?new Date(e.updatedAt):new Date,zone:e.zone||d.Bc.FullBody,estimatedDuration:()=>e.duration||0,determineWorkoutZone:()=>e.zone||d.Bc.FullBody,toDictionary:()=>({})})}createDefaultExercise(){return{id:"",name:"",category:{type:"weightTraining",details:{reps:"",sets:0,weight:0,screenTime:0,selectedVideo:this.parseExerciseVideo({})}},primaryBodyParts:[],secondaryBodyParts:[],tags:[],description:"",visibility:"live",steps:[],videos:[],currentVideoPosition:0,reps:"",sets:0,weight:0,author:{userId:"",username:""},createdAt:new Date,updatedAt:new Date}}parseExerciseLogData(e){return{id:e.id||"",workoutId:e.workoutId||"",userId:e.userId||"",exercise:e.exercise?this.parseExercise(e.exercise):this.createDefaultExercise(),logs:(e.log||[]).map(e=>({reps:parseInt(e.reps||"0"),weight:parseFloat(e.weight||"0"),leftReps:parseInt(e.leftReps||"0"),leftWeight:parseFloat(e.leftWeight||"0"),isSplit:e.isSplit||!1,isBodyWeight:e.isBodyWeight||!1,isCompleted:e.isCompleted||!1,duration:parseInt(e.duration||"0"),calories:parseInt(e.calories||"0"),bpm:parseInt(e.bpm||"0")})),feedback:e.feedback||"",note:e.note||"",recommendedWeight:e.recommendedWeight,isSplit:e.isSplit||!1,isBodyWeight:e.isBodyWeight||!1,logSubmitted:e.logSubmitted||!1,logIsEditing:e.logIsEditing||!1,isCompleted:e.isCompleted||!1,createdAt:e.createdAt instanceof Date?e.createdAt:"function"==typeof e.createdAt?.toDate?e.createdAt.toDate():e.createdAt?new Date(e.createdAt):new Date,updatedAt:e.updatedAt instanceof Date?e.updatedAt:"function"==typeof e.updatedAt?.toDate?e.updatedAt.toDate():e.updatedAt?new Date(e.updatedAt):new Date}}parseExercise(e){return{id:e.id?.stringValue||e.id||"",name:e.name?.stringValue||e.name||"",category:this.parseExerciseCategory(e.category?.mapValue?.fields||e.category||{}),primaryBodyParts:this.parseBodyParts(e.primaryBodyParts),secondaryBodyParts:this.parseBodyParts(e.secondaryBodyParts),tags:(e.tags?.arrayValue?.values||e.tags||[]).map(e=>e.stringValue||e),description:e.description?.stringValue||e.description||"",visibility:(e.visibility?.arrayValue?.values||e.visibility||[]).map(e=>e.stringValue||e),steps:(e.steps?.arrayValue?.values||e.steps||[]).map(e=>e.stringValue||e),videos:this.parseVideos(e.videos),currentVideoPosition:parseInt(e.currentVideoPosition?.integerValue||e.currentVideoPosition||"0"),reps:e.reps?.stringValue||e.reps||"",sets:parseInt(e.sets?.integerValue||e.sets||"0"),weight:parseFloat(e.weight?.doubleValue||e.weight||"0"),author:this.parseExerciseAuthor(e.author?.mapValue?.fields||e.author||{}),createdAt:new Date(1e3*parseFloat(e.createdAt?.doubleValue||e.createdAt||"0")),updatedAt:new Date(1e3*parseFloat(e.updatedAt?.doubleValue||e.updatedAt||"0"))}}parseExerciseCategory(e){let t=e.id?.stringValue||e.id||"";return"cardio"===t?{type:"cardio",details:{duration:parseInt(e.duration?.integerValue||e.duration||"0"),bpm:parseInt(e.bpm?.integerValue||e.bpm||"0"),calories:parseInt(e.calories?.integerValue||e.calories||"0"),screenTime:parseInt(e.screenTime?.integerValue||e.screenTime||"0"),selectedVideo:this.parseExerciseVideo(e.selectedVideo?.mapValue?.fields||e.selectedVideo)}}:{type:"weightTraining",details:{reps:e.reps?.stringValue||e.reps||"",sets:parseInt(e.sets?.integerValue||e.sets||"0"),weight:parseFloat(e.weight?.doubleValue||e.weight||"0"),screenTime:parseInt(e.screenTime?.integerValue||e.screenTime||"0"),selectedVideo:this.parseExerciseVideo(e.selectedVideo?.mapValue?.fields||e.selectedVideo)}}}parseBodyParts(e){return(e?.arrayValue?.values||e||[]).map(e=>e.stringValue||e)}parseVideos(e){return(e?.arrayValue?.values||e||[]).map(e=>this.parseExerciseVideo(e.mapValue?.fields||e))}parseExerciseVideo(e){return{id:e.id?.stringValue||e.id||"",exerciseId:e.exerciseId?.stringValue||e.exerciseId||"",username:e.username?.stringValue||e.username||"",userId:e.userId?.stringValue||e.userId||"",videoURL:e.videoURL?.stringValue||e.videoURL||"",fileName:e.fileName?.stringValue||e.fileName||"",exercise:e.exercise?.stringValue||e.exercise||"",profileImage:this.parseProfileImage(e.profileImage?.mapValue?.fields||e.profileImage||{}),caption:e.caption?.stringValue||e.caption||"",gifURL:e.gifURL?.stringValue||e.gifURL||"",thumbnail:e.thumbnail?.stringValue||e.thumbnail||"",visibility:e.visibility?.stringValue||e.visibility||"open",totalAccountsReached:parseInt(e.totalAccountsReached?.integerValue||e.totalAccountsReached||"0"),totalAccountLikes:parseInt(e.totalAccountLikes?.integerValue||e.totalAccountLikes||"0"),totalAccountBookmarked:parseInt(e.totalAccountBookmarked?.integerValue||e.totalAccountBookmarked||"0"),totalAccountUsage:parseInt(e.totalAccountUsage?.integerValue||e.totalAccountUsage||"0"),isApproved:e.isApproved?.booleanValue||e.isApproved||!1,liked:e.liked?.booleanValue||e.liked,bookmarked:e.bookmarked?.booleanValue||e.bookmarked,createdAt:new Date(1e3*parseFloat(e.createdAt?.doubleValue||e.createdAt||"0")),updatedAt:new Date(1e3*parseFloat(e.updatedAt?.doubleValue||e.updatedAt||"0"))}}parseProfileImage(e){return{profileImageURL:e.profileImageURL?.stringValue||e.profileImageURL||"",imageOffsetWidth:parseFloat(e.imageOffsetWidth?.doubleValue||e.imageOffsetWidth||"0"),imageOffsetHeight:parseFloat(e.imageOffsetHeight?.doubleValue||e.imageOffsetHeight||"0")}}parseExerciseAuthor(e){return{userId:e.userId?.stringValue||e.userId||"",username:e.username?.stringValue||e.username||""}}async fetchSavedWorkout(e,t){try{let r=(0,o.doc)(s.db,"users",e,"MyCreatedWorkouts",t),a=await (0,o.getDoc)(r);if(!a.exists())return[null,null];let i=await this.fetchAndMapExercisesWithVideos(),n=a.data(),d=(n.exercises||[]).map(e=>{let t=i.find(t=>t.name===e.exercise.name);return{...e,exercise:t||e.exercise}});n.exercises=d;let l=this.parseWorkoutData(n),c=(0,o.collection)(r,"logs"),g=(await (0,o.getDocs)(c)).docs.map(r=>{let a=r.data(),o=i.find(e=>e.name===a.exercise.name);return{id:r.id,workoutId:t,userId:e,exercise:o||a.exercise,logs:a.log||[],feedback:a.feedback||"",note:a.note||"",recommendedWeight:a.recommendedWeight,isSplit:a.isSplit||!1,isBodyWeight:a.isBodyWeight||!1,logSubmitted:a.logSubmitted||!1,logIsEditing:a.logIsEditing||!1,isCompleted:a.isCompleted||!1,createdAt:(0,u.Q)(a.createdAt),updatedAt:(0,u.Q)(a.updatedAt)}});return l.logs=g,[l,g]}catch(e){return console.error("Error fetching saved workout:",e),[null,null]}}async fetchUserChallengesByChallengeId(e){let t=(0,o.collection)(s.db,"user-challenge"),r=(0,o.query)(t,(0,o.where)("challengeId","==",e));try{return(await (0,o.getDocs)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new d.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new d.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:(0,c.C9)(t.createdAt),updatedAt:(0,c.C9)(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by challengeId:",e),e}}async getCollectionById(e){try{let t=(0,o.doc)(s.db,"sweatlist-collection",e),r=await (0,o.getDoc)(t);if(r.exists())return new d.No({id:r.id,...r.data()});throw Error("Collection not found")}catch(e){throw console.error("Error getting collection by ID:",e),e}}async fetchActiveChallenges(){let e=i.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,o.collection)(s.db,"user-challenge"),r=(0,o.query)(t,(0,o.where)("userId","==",e.id));try{return(await (0,o.getDocs)(r)).docs.map(e=>{let t=e.data(),r=t.challenge?new d.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:(0,u.Q)(t.challenge.startDate),endDate:(0,u.Q)(t.challenge.endDate),createdAt:(0,u.Q)(t.challenge.createdAt),updatedAt:(0,u.Q)(t.challenge.updatedAt),introVideos:(t.challenge.introVideos||[]).map(e=>new d.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0;return{id:e.id,...t,challenge:r,createdAt:(0,u.Q)(t.createdAt),updatedAt:(0,u.Q)(t.updatedAt)}}).filter(e=>{let t=e.challenge?.endDate;return t&&t>new Date})}catch(e){throw console.error("Error fetching active challenges:",e),e}}async fetchUserChallenges(){let e=i.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,o.collection)(s.db,"user-challenge"),r=(0,o.query)(t,(0,o.where)("userId","==",e.id));try{return(await (0,o.getDocs)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching user challenges:",e),Error("Failed to fetch user challenges")}}async updateWorkoutLogs({userId:e,workoutId:t,logs:r}){try{let a=(0,o.doc)(s.db,"users",e,"workoutSessions",t),i=(0,o.collection)(a,"logs"),n=(0,o.writeBatch)(s.db);r.forEach(e=>{let t=(0,o.doc)(i,e.id);n.update(t,{isCompleted:e.isCompleted,logs:e.logs,updatedAt:(0,c.Bt)()})}),await n.commit()}catch(e){throw console.error("Error updating workout logs:",e),e}}async fetchCurrentWorkoutSession(e){if(!e)throw Error("No user ID provided");let t=await (0,o.getDocs)((0,o.collection)(s.db,"exercises")),r=(await (0,o.getDocs)((0,o.collection)(s.db,"exerciseVideos"))).docs.map(e=>n.Ax.fromFirebase({id:e.id,...e.data()})),a=t.docs.map(e=>{let t=n.cd.fromFirebase({id:e.id,...e.data()}),a=r.filter(e=>e.exercise.toLowerCase()===t.name.toLowerCase());return{...t,videos:a}}),i=(0,o.collection)(s.db,"users",e,"workoutSessions"),l=(0,o.query)(i,(0,o.where)("status","==",d.Z0.QueuedUp)),c=await (0,o.getDocs)(l);return c.empty&&(l=(0,o.query)(i,(0,o.where)("status","==",d.Z0.InProgress)),(c=await (0,o.getDocs)(l)).empty)?{workout:null,logs:null}:this.processWorkoutSessionDocument(c.docs[0],a)}async cancelWorkoutSession(e,t){try{let r=(0,o.collection)(s.db,"users",e,"workoutSessions",t,"logs"),a=await (0,o.getDocs)(r),i=(0,o.writeBatch)(s.db);a.empty||(a.docs.forEach(e=>{i.delete(e.ref)}),await i.commit());let n=(0,o.doc)(s.db,"users",e,"workoutSessions",t);await (0,o.deleteDoc)(n)}catch(e){throw console.error("Error canceling workout session:",e),e}}async fetchAndMapExercisesWithVideos(){try{let e=(await (0,o.getDocs)((0,o.collection)(s.db,"exercises"))).docs.map(e=>n.cd.fromFirebase({id:e.id,...e.data()})),t=(await (0,o.getDocs)((0,o.collection)(s.db,"exerciseVideos"))).docs.map(e=>n.Ax.fromFirebase({id:e.id,...e.data()}));return e.map(e=>{let r=t.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return{...e,videos:r}})}catch(e){throw console.error("Error fetching and mapping exercises with videos:",e),e}}async fetchAllWorkoutSessions(e){if(!e)throw Error("No user ID provided");try{let t=(await (0,o.getDocs)((0,o.collection)(s.db,"exercises"))).docs.map(e=>n.cd.fromFirebase({id:e.id,...e.data()})),r=(await (0,o.getDocs)((0,o.collection)(s.db,"exerciseVideos"))).docs.map(e=>n.Ax.fromFirebase({id:e.id,...e.data()})),a=t.map(e=>{let t=r.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return{...e,videos:t}}),i=(0,o.collection)(s.db,"users",e,"workoutSessions"),d=await (0,o.getDocs)(i);if(d.empty)return console.log("No workout sessions found for user"),[];return await Promise.all(d.docs.map(async e=>{let t=await this.processWorkoutSessionDocument(e,a);return t.logs&&t.logs.sort((e,t)=>{let r=e.order??0,a=t.order??0;return r-a}),t}))}catch(e){throw console.error("Error fetching workout sessions:",e),e}}async processWorkoutSessionDocument(e,t){let r=e.data(),a=(r.exercises||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),a=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:a||e.exercise}}),s=new d.oQ({id:e.id,roundWorkoutId:r.roundWorkoutId||"",exercises:a,title:r.title||"",description:r.description||"",duration:r.duration||0,useAuthorContent:r.useAuthorContent||!1,isCompleted:r.isCompleted||!1,workoutStatus:r.workoutStatus||d.Z0.Archived,author:r.author||"",createdAt:(0,u.Q)(r.createdAt),updatedAt:(0,u.Q)(r.updatedAt),startTime:(0,u.Q)(r.startTime),collectionId:r.collectionId,challenge:r.challenge,logs:(r.logs||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),a=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:a||e.exercise}}),workoutRating:r.workoutRating,order:r.order,zone:r.zone||d.Bc.FullBody});console.log("The Workout ID is: "+s.id);let i=(0,o.collection)(e.ref,"logs"),l=(await (0,o.getDocs)(i)).docs.map(e=>{let r=e.data(),a=r.exercise?.name?.toLowerCase().trim(),o=t.find(e=>e.name.toLowerCase().trim()===a),i={...r,id:e.id,workoutId:s.id,exercise:o||r.exercise,createdAt:(0,u.Q)(r.createdAt),updatedAt:(0,u.Q)(r.updatedAt)};return new n.lg(i)});return{workout:s,logs:l}}async saveWorkoutSession({userId:e,workout:t,logs:r}){if(!e)throw Error("No user ID provided");try{let a=new Date,i=new d.oQ({...t,roundWorkoutId:`${t.id}-${a.getTime()}`,workoutStatus:d.Z0.QueuedUp,createdAt:a,updatedAt:a,startTime:a,logs:[]}),n=(0,o.doc)((0,o.collection)(s.db,"users",e,"workoutSessions"));await (0,o.setDoc)(n,i);let l=(0,o.collection)(n,"logs"),c=(0,o.writeBatch)(s.db);return r.forEach((e,t)=>{let r=(0,o.doc)(l,`${e.id}-${a.getTime()}`);c.set(r,{id:r.id,workoutId:n.id,exercise:{id:e.exercise.id,name:e.exercise.name,category:e.exercise.category,videos:e.exercise.videos||[]},order:t,createdAt:a,updatedAt:a,logSubmitted:!1,isCompleted:!1})}),await c.commit(),i}catch(e){throw console.error("Error saving workout session:",e),e}}async joinChallenge({username:e,challengeId:t}){if(!i.W4.currentUser)throw Error("No user is signed in");let r=(0,o.collection)(s.db,"users"),a=(0,o.query)(r,(0,o.where)("username","==",e)),n=await (0,o.getDocs)(a);if(n.empty)throw Error("User not found");let d=n.docs[0],l=d.data(),c=d.id,u=(0,o.doc)(s.db,"sweatlist-collection",t),g=await (0,o.getDoc)(u);if(!g.exists())throw Error("Challenge not found");let h=g.data(),p=`${t}-${c}-${Date.now()}`,w={id:p,challenge:h,challengeId:t,userId:c,fcmToken:l.fcmToken||"",profileImage:l.profileImage||{},progress:0,completedWorkouts:[],isCompleted:!1,uid:c,location:l.location||null,city:"",country:"",timezone:"",username:e,joinDate:new Date,createdAt:new Date,updatedAt:new Date,pulsePoints:{baseCompletion:0,firstCompletion:0,streakBonus:0,checkInBonus:0,effortRating:0,chatParticipation:0,locationCheckin:0,contentEngagement:0,encouragementSent:0,encouragementReceived:0},currentStreak:0,encouragedUsers:[],encouragedByUsers:[],checkIns:[]};await (0,o.setDoc)((0,o.doc)(s.db,"user-challenge",p),w)}constructor(){this._currentWorkout=null,this._currentWorkoutLogs=[]}}let p=new h;a()}catch(e){a(e)}})},2286:(e,t,r)=>{r.d(t,{Bt:()=>o,C9:()=>a});let a=e=>e?e._seconds?new Date(1e3*e._seconds).toISOString():e.seconds?new Date(1e3*e.seconds).toISOString():e.toDate&&"function"==typeof e.toDate?e.toDate().toISOString():e instanceof Date?e.toISOString():null:null,o=()=>Date.now()/1e3}};
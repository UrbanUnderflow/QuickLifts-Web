"use strict";exports.id=461,exports.ids=[461],exports.modules={9284:(e,t,r)=>{r.a(e,async(e,o)=>{try{r.d(t,{G:()=>p});var a=r(1492),s=r(9777),i=r(8157),c=r(6738),n=r(2069),d=r(3592),l=r(2286),u=r(3171),h=r(1912),g=r(1308),w=e([a,s,i,h,g]);[a,s,i,h,g]=w.then?(await w)():w;class m{get currentWorkout(){return h.h.getState().workout.currentWorkout}set currentWorkout(e){h.h.dispatch((0,g.q1)(e))}get currentWorkoutLogs(){return h.h.getState().workout.currentExerciseLogs}set currentWorkoutLogs(e){h.h.dispatch((0,g.HX)(e))}get currentWorkoutSummary(){return h.h.getState().workout.workoutSummary}set currentWorkoutSummary(e){h.h.dispatch((0,g.QU)(e))}async fetchCurrentWorkout(e){return(await this.fetchCurrentWorkoutSession(e)).workout}async getAllSweatlists(e){if(!e)throw Error("User ID is required");let t=(0,a.collection)(s.db,"users",e,"MyCreatedWorkouts");try{let r=await this.fetchAndMapExercisesWithVideos(),o=await (0,a.getDocs)(t),i=[];for(let t of o.docs){let o=t.data(),c=t.id,d=(o.exercises||[]).map(e=>{let t=r.find(t=>t.name===e.exercise.name);return console.log("This is the mapped exercise: "+t),{...e,exercise:t||e}}),l=new n.oQ({id:o.id||"",roundWorkoutId:o.roundWorkoutId||"",collectionId:o.collectionId,exercises:d,challenge:o.challenge,logs:[],title:o.title||"",description:o.description||"",duration:o.duration||0,workoutRating:o.workoutRating,useAuthorContent:o.useAuthorContent||!1,isCompleted:o.isCompleted||!1,workoutStatus:o.workoutStatus||"notStarted",startTime:o.startTime?new Date(o.startTime):void 0,order:o.order,author:o.author||e,createdAt:o.createdAt?new Date(o.createdAt):new Date,updatedAt:o.updatedAt?new Date(o.updatedAt):new Date,zone:o.zone||"FULL_BODY"}),u=(0,a.collection)(s.db,"users",e,"MyCreatedWorkouts",c,"logs"),h=await (0,a.getDocs)(u);l.logs=h.docs.map(e=>({...e.data(),id:e.id})),i.push(l)}return i}catch(e){throw console.error("Error fetching sweatlists:",e.message),Error("Failed to fetch sweatlists")}}async getUserChallengesByChallengeId(e){let t=(0,a.collection)(s.db,"user-challenge"),r=(0,a.query)(t,(0,a.where)("challengeId","==",e));try{let e=(await (0,a.getDocs)(r)).docs.map(e=>{let t=e.data();return new n.lM(e.id,t)});if(e.length>0)return{userChallenges:e};return{userChallenges:[],error:"No user challenges found for this challenge."}}catch(e){return console.error("Error fetching user challenges by challengeId:",e),{userChallenges:[],error:e instanceof Error?e.message:"Unknown error"}}}async fetchWorkoutSummaries(e){let t=i.W4.currentUser;if(!t?.id)throw Error("No user is signed in");let r=(0,d.WU)(e,"MM-dd-yyyy"),o=(0,a.collection)(s.db,"users",t.id,"workoutSummaries"),c=(0,a.query)(o,(0,a.where)("date","==",r));try{return(await (0,a.getDocs)(c)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching workout summaries:",e.message),Error(e.message)}}async fetchAllWorkoutSummaries(){let e=i.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,a.collection)(s.db,"users",e.id,"workoutSummary"),r=(0,a.query)(t,(0,a.orderBy)("createdAt","asc"));try{return(await (0,a.getDocs)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching all workout summaries:",e.message),Error(e.message)}}async fetchUserChallengesByUserId(e){let t=(0,a.collection)(s.db,"user-challenge"),r=(0,a.query)(t,(0,a.where)("userId","==",e));try{return(await (0,a.getDocs)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:(0,l.C9)(t.createdAt),updatedAt:(0,l.C9)(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by userId:",e),e}}async fetchCollectionWithSweatLists(e){try{let t=await this.getCollectionById(e),r=[];for(let e of t.sweatlistIds||[])try{let[t]=await this.fetchSavedWorkout(e.sweatlistAuthorId,e.id);t&&r.push(t)}catch(t){console.error(`Error fetching workout ${e.id}:`,t)}return{collection:t,sweatLists:r}}catch(e){throw console.error("Error fetching collection with sweat lists:",e),e}}async fetchSavedWorkout(e,t){try{let r=(0,a.doc)(s.db,"users",e,"MyCreatedWorkouts",t),o=await (0,a.getDoc)(r);if(!o.exists())return[null,null];let i=await this.fetchAndMapExercisesWithVideos(),d=o.data(),l=(d.exercises||[]).map(e=>{let t=i.find(t=>t.name===e.exercise.name);return{...e,exercise:t||e.exercise}});d.exercises=l;let h=new n.oQ({id:d.id,roundWorkoutId:d.roundWorkoutId,collectionId:d.collectionId,exercises:d.exercises,challenge:d.challenge,logs:d.logs,title:d.title,description:d.description,duration:d.duration,workoutRating:d.workoutRating,useAuthorContent:d.useAuthorContent,isCompleted:d.isCompleted,workoutStatus:d.workoutStatus,startTime:d.startTime,order:d.order,author:d.author,assignedDate:d.assignedDate,createdAt:d.createdAt,updatedAt:d.updatedAt}),g=(0,a.collection)(r,"logs"),w=(await (0,a.getDocs)(g)).docs.map(r=>{let o=r.data(),a=i.find(e=>e.name===o.exercise.name);return new c.lg({id:r.id,workoutId:t,userId:e,exercise:a||o.exercise,logs:o.log||[],feedback:o.feedback||"",note:o.note||"",recommendedWeight:o.recommendedWeight,isSplit:o.isSplit||!1,isBodyWeight:o.isBodyWeight||!1,logSubmitted:o.logSubmitted||!1,logIsEditing:o.logIsEditing||!1,isCompleted:o.isCompleted||!1,completedAt:(0,u.Q)(o.completedAt),createdAt:(0,u.Q)(o.createdAt),updatedAt:(0,u.Q)(o.updatedAt)})});return h.logs=w,[h,w]}catch(e){return console.error("Error fetching saved workout:",e),[null,null]}}async fetchUserChallengesByChallengeId(e){let t=(0,a.collection)(s.db,"user-challenge"),r=(0,a.query)(t,(0,a.where)("challengeId","==",e));try{return(await (0,a.getDocs)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:(0,l.C9)(t.createdAt),updatedAt:(0,l.C9)(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by challengeId:",e),e}}async getCollectionById(e){console.log("Fetching collection with id:",e);try{let t=(0,a.doc)(s.db,"sweatlist-collection",e),r=await (0,a.getDoc)(t);if(r.exists())return new n.No({id:r.id,...r.data()});throw Error("Collection not found")}catch(e){throw console.error("Error getting collection by ID:",e),e}}async fetchActiveChallenges(){let e=i.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,a.collection)(s.db,"user-challenge"),r=(0,a.query)(t,(0,a.where)("userId","==",e.id));try{return(await (0,a.getDocs)(r)).docs.map(e=>{let t=e.data(),r=t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:(0,u.Q)(t.challenge.startDate),endDate:(0,u.Q)(t.challenge.endDate),createdAt:(0,u.Q)(t.challenge.createdAt),updatedAt:(0,u.Q)(t.challenge.updatedAt),introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0;return{id:e.id,...t,challenge:r,createdAt:(0,u.Q)(t.createdAt),updatedAt:(0,u.Q)(t.updatedAt)}}).filter(e=>{let t=e.challenge?.endDate;return t&&t>new Date})}catch(e){throw console.error("Error fetching active challenges:",e),e}}async fetchUserChallenges(){let e=i.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,a.collection)(s.db,"user-challenge"),r=(0,a.query)(t,(0,a.where)("userId","==",e.id));try{return(await (0,a.getDocs)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching user challenges:",e),Error("Failed to fetch user challenges")}}async updateWorkoutSummary({userId:e,workoutId:t,summary:r}){if(!e)throw Error("No user ID provided");try{let t=(0,a.doc)(s.db,"users",e,"workoutSummary",r.id),o={id:r.id,workoutId:r.workoutId,exercises:r.exercises,bodyParts:r.bodyParts,secondaryBodyParts:r.secondaryBodyParts,workoutTitle:r.workoutTitle,caloriesBurned:r.caloriesBurned,workoutRating:r.workoutRating,exercisesCompleted:r.exercisesCompleted,aiInsight:r.aiInsight,recommendations:r.recommendations,gifURLs:r.gifURLs,recommendedWork:r.recommendedWork,isCompleted:r.isCompleted,createdAt:r.createdAt,updatedAt:new Date,completedAt:r.completedAt,duration:r.duration};await (0,a.setDoc)(t,o,{merge:!0}),console.log("Workout summary document updated successfully")}catch(e){throw console.error("Error updating workout summary:",e),e}}async updateWorkoutLogs({userId:e,workoutId:t,logs:r}){try{let o=(0,a.doc)(s.db,"users",e,"workoutSessions",t),i=(0,a.collection)(o,"logs"),c=(0,a.writeBatch)(s.db);r.forEach(e=>{let t=(0,a.doc)(i,e.id);c.update(t,{...e.toDictionary()})}),await c.commit()}catch(e){throw console.error("Error updating workout logs:",e),e}}async cancelWorkout(e,t){if(!i.W4.currentUser?.id||!e)throw Error("User not authenticated.");try{await this.deleteWorkoutSession(e.id),t&&await this.deleteWorkoutSummary(t.id),this.cleanUpWorkoutInProgress(),console.log("Workout canceled and cleaned up successfully.")}catch(e){throw console.error("Error canceling workout:",e),e}}async deleteWorkoutSession(e){if(!i.W4.currentUser?.id||!e)throw Error("User not authenticated.");let t=i.W4.currentUser.id,r=(0,a.doc)(s.db,"users",t,"workoutSessions",e);try{let e=(0,a.collection)(r,"logs"),t=await (0,a.getDocs)(e),o=(0,a.writeBatch)(s.db);t.docs.forEach(e=>{o.delete(e.ref)}),o.delete(r),await o.commit(),console.log("Workout session and logs deleted successfully.")}catch(e){throw console.error("Error deleting workout session:",e),e}}async deleteWorkoutSummary(e){if(e&&i.W4.currentUser?.id)try{let t=(0,a.doc)(s.db,"users",i.W4.currentUser.id,"workoutSummary",e);await (0,a.deleteDoc)(t),console.log("Workout summary deleted successfully.")}catch(e){throw console.error("Error deleting workout summary:",e),e}}cleanUpWorkoutInProgress(){h.h.dispatch((0,g.gf)())}async fetchCurrentWorkoutSession(e){if(!e)throw Error("No user ID provided");let t=await (0,a.getDocs)((0,a.collection)(s.db,"exercises")),r=(await (0,a.getDocs)((0,a.collection)(s.db,"exerciseVideos"))).docs.map(e=>c.Ax.fromFirebase({id:e.id,...e.data()})),o=t.docs.map(e=>{let t=c.cd.fromFirebase({id:e.id,...e.data()}),o=r.filter(e=>e.exercise.toLowerCase()===t.name.toLowerCase());return new c.cd({...t,videos:o})}),i=(0,a.collection)(s.db,"users",e,"workoutSessions"),d=(0,a.query)(i,(0,a.where)("status","==",n.Z0.QueuedUp)),l=await (0,a.getDocs)(d);return l.empty&&(d=(0,a.query)(i,(0,a.where)("status","==",n.Z0.InProgress)),(l=await (0,a.getDocs)(d)).empty)?{workout:null,logs:null}:this.processWorkoutSessionDocument(l.docs[0],o)}async fetchAndMapExercisesWithVideos(){try{let e=(await (0,a.getDocs)((0,a.collection)(s.db,"exercises"))).docs.map(e=>c.cd.fromFirebase({id:e.id,...e.data()})),t=(await (0,a.getDocs)((0,a.collection)(s.db,"exerciseVideos"))).docs.map(e=>c.Ax.fromFirebase({id:e.id,...e.data()}));return e.map(e=>{let r=t.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return new c.cd({...e,videos:r})})}catch(e){throw console.error("Error fetching and mapping exercises with videos:",e),e}}async fetchAllWorkoutSessions(e){if(!e)throw Error("No user ID provided");try{let t=(await (0,a.getDocs)((0,a.collection)(s.db,"exercises"))).docs.map(e=>c.cd.fromFirebase({id:e.id,...e.data()})),r=(await (0,a.getDocs)((0,a.collection)(s.db,"exerciseVideos"))).docs.map(e=>c.Ax.fromFirebase({id:e.id,...e.data()})),o=t.map(e=>{let t=r.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return new c.cd({...e,videos:t})}),i=(0,a.collection)(s.db,"users",e,"workoutSessions"),n=await (0,a.getDocs)(i);if(n.empty)return console.log("No workout sessions found for user"),[];return await Promise.all(n.docs.map(async e=>{let t=await this.processWorkoutSessionDocument(e,o);return t.logs&&t.logs.sort((e,t)=>{let r=e.order??0,o=t.order??0;return r-o}),t}))}catch(e){throw console.error("Error fetching workout sessions:",e),e}}async updateCollection(e){try{let t=(0,a.collection)(s.db,"sweatlist-collection");if(!e.id||""===e.id.trim()){let r=(0,a.doc)(t);e.id=r.id}return e.challenge&&(e.challenge.id=e.id),e.updatedAt=new Date,await (0,a.setDoc)((0,a.doc)(t,e.id),e.toDictionary()),console.log("Collection updated successfully"),e}catch(e){throw console.error("Error updating collection document:",e),Error("Error while updating the collection")}}async processWorkoutSessionDocument(e,t){let r=e.data(),o=(r.exercises||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),o=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:o||e.exercise}}),s=new n.oQ({id:e.id,roundWorkoutId:r.roundWorkoutId||"",exercises:o,title:r.title||"",description:r.description||"",duration:r.duration||0,useAuthorContent:r.useAuthorContent||!1,isCompleted:r.isCompleted||!1,workoutStatus:r.workoutStatus||n.Z0.Archived,author:r.author||"",createdAt:(0,u.Q)(r.createdAt),updatedAt:(0,u.Q)(r.updatedAt),startTime:(0,u.Q)(r.startTime),collectionId:r.collectionId,challenge:r.challenge,logs:(r.logs||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),o=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:o||e.exercise}}),workoutRating:r.workoutRating,order:r.order,zone:r.zone||n.Bc.FullBody});console.log("The Workout ID is: "+s.id);let i=(0,a.collection)(e.ref,"logs"),d=(await (0,a.getDocs)(i)).docs.map(e=>{let r=e.data(),o=r.exercise?.name?.toLowerCase().trim(),a=t.find(e=>e.name.toLowerCase().trim()===o),i={...r,id:e.id,workoutId:s.id,exercise:a||r.exercise,createdAt:(0,u.Q)(r.createdAt),updatedAt:(0,u.Q)(r.updatedAt)};return new c.lg(i)});return{workout:s,logs:d}}async saveWorkoutSession({userId:e,workout:t,logs:r}){if(!e)throw Error("No user ID provided");try{let o=new Date,i=new n.oQ({...t,roundWorkoutId:`${t.id}-${o.getTime()}`,workoutStatus:n.Z0.QueuedUp,createdAt:o,updatedAt:o,startTime:o,logs:[]}),c=(0,a.doc)((0,a.collection)(s.db,"users",e,"workoutSessions"));await (0,a.setDoc)(c,i);let d=(0,a.collection)(c,"logs"),l=(0,a.writeBatch)(s.db);return r.forEach((e,t)=>{let r=(0,a.doc)(d,`${e.id}-${o.getTime()}`);l.set(r,{id:r.id,workoutId:c.id,exercise:{id:e.exercise.id,name:e.exercise.name,category:e.exercise.category,videos:e.exercise.videos||[]},order:t,createdAt:o,updatedAt:o,logSubmitted:!1,isCompleted:!1})}),await l.commit(),i}catch(e){throw console.error("Error saving workout session:",e),e}}async joinChallenge({username:e,challengeId:t}){if(!i.W4.currentUser)throw Error("No user is signed in");let r=(0,a.collection)(s.db,"users"),o=(0,a.query)(r,(0,a.where)("username","==",e)),c=await (0,a.getDocs)(o);if(c.empty)throw Error("User not found");let n=c.docs[0],d=n.data(),l=n.id,u=(0,a.doc)(s.db,"sweatlist-collection",t),h=await (0,a.getDoc)(u);if(!h.exists())throw Error("Challenge not found");let g=h.data(),w=`${t}-${l}-${Date.now()}`,m={id:w,challenge:g,challengeId:t,userId:l,fcmToken:d.fcmToken||"",profileImage:d.profileImage||{},progress:0,completedWorkouts:[],isCompleted:!1,uid:l,location:d.location||null,city:"",country:"",timezone:"",username:e,joinDate:new Date,createdAt:new Date,updatedAt:new Date,pulsePoints:{baseCompletion:0,firstCompletion:0,streakBonus:0,checkInBonus:0,effortRating:0,chatParticipation:0,locationCheckin:0,contentEngagement:0,encouragementSent:0,encouragementReceived:0},currentStreak:0,encouragedUsers:[],encouragedByUsers:[],checkIns:[]};await (0,a.setDoc)((0,a.doc)(s.db,"user-challenge",w),m)}}let p=new m;o()}catch(e){o(e)}})},1070:(e,t,r)=>{r.r(t),r.d(t,{default:()=>c});var o=r(997),a=r(6859),s=r.n(a);class i extends s(){static async getInitialProps(e){return{...await s().getInitialProps(e)}}render(){return(0,o.jsxs)(a.Html,{lang:"en",children:[o.jsx(a.Head,{}),(0,o.jsxs)("body",{children:[o.jsx(a.Main,{}),o.jsx(a.NextScript,{})]})]})}}let c=i},2286:(e,t,r)=>{r.d(t,{C9:()=>o});let o=e=>e?e._seconds?new Date(1e3*e._seconds).toISOString():e.seconds?new Date(1e3*e.seconds).toISOString():e.toDate&&"function"==typeof e.toDate?e.toDate().toISOString():e instanceof Date?e.toISOString():null:null}};
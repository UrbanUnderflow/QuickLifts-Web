"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[586],{9586:function(e,t,r){r.d(t,{G:function(){return h}});var a=r(109),o=r(7333),s=r(7705),i=r(3530),n=r(4454),d=r(2066);let l=e=>e?e._seconds?new Date(1e3*e._seconds).toISOString():e.seconds?new Date(1e3*e.seconds).toISOString():e.toDate&&"function"==typeof e.toDate?e.toDate().toISOString():e instanceof Date?e.toISOString():null:null,c=()=>Date.now()/1e3;var u=r(2778);class g{get currentWorkout(){return this._currentWorkout}set currentWorkout(e){this._currentWorkout=e}get currentWorkoutLogs(){return this._currentWorkoutLogs}set currentWorkoutLogs(e){this._currentWorkoutLogs=e}async fetchCurrentWorkout(e){return(await this.fetchCurrentWorkoutSession(e)).workout}async getAllSweatlists(e){if(!e)throw Error("User ID is required");let t=(0,a.hJ)(o.db,"users",e,"MyCreatedWorkouts");try{let r=await this.fetchAndMapExercisesWithVideos(),s=await (0,a.PL)(t),i=[];for(let t of s.docs){let s=t.data(),d=t.id,l=(s.exercises||[]).map(e=>{let t=r.find(t=>t.name===e.exercise.name);return console.log("This is the mapped exercise: "+t),{...e,exercise:t||e}}),c=new n.oQ({id:s.id||"",roundWorkoutId:s.roundWorkoutId||"",collectionId:s.collectionId,exercises:l,challenge:s.challenge,logs:[],title:s.title||"",description:s.description||"",duration:s.duration||0,workoutRating:s.workoutRating,useAuthorContent:s.useAuthorContent||!1,isCompleted:s.isCompleted||!1,workoutStatus:s.workoutStatus||"notStarted",startTime:s.startTime?new Date(s.startTime):void 0,order:s.order,author:s.author||e,createdAt:s.createdAt?new Date(s.createdAt):new Date,updatedAt:s.updatedAt?new Date(s.updatedAt):new Date,zone:s.zone||"FULL_BODY"}),u=(0,a.hJ)(o.db,"users",e,"MyCreatedWorkouts",d,"logs"),g=await (0,a.PL)(u);c.logs=g.docs.map(e=>({...e.data(),id:e.id})),i.push(c)}return i}catch(e){throw console.error("Error fetching sweatlists:",e.message),Error("Failed to fetch sweatlists")}}async fetchWorkoutSummaries(e){let t=s.W4.currentUser;if(!t?.id)throw Error("No user is signed in");let r=(0,d.WU)(e,"MM-dd-yyyy"),i=(0,a.hJ)(o.db,"users",t.id,"workoutSummaries"),n=(0,a.IO)(i,(0,a.ar)("date","==",r));try{return(await (0,a.PL)(n)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching workout summaries:",e.message),Error(e.message)}}async fetchAllWorkoutSummaries(){let e=s.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,a.hJ)(o.db,"users",e.id,"workoutSummary"),r=(0,a.IO)(t,(0,a.Xo)("createdAt","asc"));try{return(await (0,a.PL)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching all workout summaries:",e.message),Error(e.message)}}async fetchUserChallengesByUserId(e){let t=(0,a.hJ)(o.db,"user-challenge"),r=(0,a.IO)(t,(0,a.ar)("userId","==",e));try{return(await (0,a.PL)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:l(t.createdAt),updatedAt:l(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by userId:",e),e}}async fetchCollectionWithSweatLists(e){try{let t=await this.getCollectionById(e),r=[];for(let e of t.sweatlistIds||[])try{let[t]=await this.fetchSavedWorkout(e.sweatlistAuthorId,e.id);t&&r.push(t)}catch(t){console.error(`Error fetching workout ${e.id}:`,t)}return{collection:t,sweatLists:r}}catch(e){throw console.error("Error fetching collection with sweat lists:",e),e}}parseWorkoutData(e){return new n.oQ({id:e.id||"",roundWorkoutId:e.roundWorkoutId||"",collectionId:e.collectionId||[],exercises:e.exercises||[],challenge:e.challenge?new n.tv({id:e.challenge.id,title:e.challenge.title,subtitle:e.challenge.subtitle,participants:e.challenge.participants||[],status:e.challenge.status,startDate:e.challenge.startDate instanceof Date?e.challenge.startDate:e.challenge.startDate?new Date(e.challenge.startDate):new Date,endDate:e.challenge.endDate instanceof Date?e.challenge.endDate:e.challenge.endDate?new Date(e.challenge.endDate):new Date,createdAt:e.challenge.createdAt instanceof Date?e.challenge.createdAt:e.challenge.createdAt?new Date(e.challenge.createdAt):new Date,updatedAt:e.challenge.updatedAt instanceof Date?e.challenge.updatedAt:e.challenge.updatedAt?new Date(e.challenge.updatedAt):new Date,introVideos:(e.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,logs:e.logs||[],title:e.title||"",description:e.description||"",duration:e.duration||0,workoutRating:e.workoutRating,useAuthorContent:e.useAuthorContent||!1,isCompleted:e.isCompleted||!1,workoutStatus:e.workoutStatus||n.Z0.QueuedUp,startTime:e.startTime instanceof Date?e.startTime:e.startTime?new Date(e.startTime):void 0,order:e.order||0,author:e.author||"",createdAt:e.createdAt instanceof Date?e.createdAt:"function"==typeof e.createdAt?.toDate?e.createdAt.toDate():e.createdAt?new Date(e.createdAt):new Date,updatedAt:e.updatedAt instanceof Date?e.updatedAt:"function"==typeof e.updatedAt?.toDate?e.updatedAt.toDate():e.updatedAt?new Date(e.updatedAt):new Date,zone:e.zone||n.Bc.FullBody,estimatedDuration:()=>e.duration||0,determineWorkoutZone:()=>e.zone||n.Bc.FullBody,toDictionary:()=>({})})}createDefaultExercise(){return{id:"",name:"",category:{type:"weightTraining",details:{reps:"",sets:0,weight:0,screenTime:0,selectedVideo:this.parseExerciseVideo({})}},primaryBodyParts:[],secondaryBodyParts:[],tags:[],description:"",visibility:"live",steps:[],videos:[],currentVideoPosition:0,reps:"",sets:0,weight:0,author:{userId:"",username:""},createdAt:new Date,updatedAt:new Date}}parseExerciseLogData(e){return{id:e.id||"",workoutId:e.workoutId||"",userId:e.userId||"",exercise:e.exercise?this.parseExercise(e.exercise):this.createDefaultExercise(),logs:(e.log||[]).map(e=>({reps:parseInt(e.reps||"0"),weight:parseFloat(e.weight||"0"),leftReps:parseInt(e.leftReps||"0"),leftWeight:parseFloat(e.leftWeight||"0"),isSplit:e.isSplit||!1,isBodyWeight:e.isBodyWeight||!1,isCompleted:e.isCompleted||!1,duration:parseInt(e.duration||"0"),calories:parseInt(e.calories||"0"),bpm:parseInt(e.bpm||"0")})),feedback:e.feedback||"",note:e.note||"",recommendedWeight:e.recommendedWeight,isSplit:e.isSplit||!1,isBodyWeight:e.isBodyWeight||!1,logSubmitted:e.logSubmitted||!1,logIsEditing:e.logIsEditing||!1,isCompleted:e.isCompleted||!1,createdAt:e.createdAt instanceof Date?e.createdAt:"function"==typeof e.createdAt?.toDate?e.createdAt.toDate():e.createdAt?new Date(e.createdAt):new Date,updatedAt:e.updatedAt instanceof Date?e.updatedAt:"function"==typeof e.updatedAt?.toDate?e.updatedAt.toDate():e.updatedAt?new Date(e.updatedAt):new Date}}parseExercise(e){return{id:e.id?.stringValue||e.id||"",name:e.name?.stringValue||e.name||"",category:this.parseExerciseCategory(e.category?.mapValue?.fields||e.category||{}),primaryBodyParts:this.parseBodyParts(e.primaryBodyParts),secondaryBodyParts:this.parseBodyParts(e.secondaryBodyParts),tags:(e.tags?.arrayValue?.values||e.tags||[]).map(e=>e.stringValue||e),description:e.description?.stringValue||e.description||"",visibility:(e.visibility?.arrayValue?.values||e.visibility||[]).map(e=>e.stringValue||e),steps:(e.steps?.arrayValue?.values||e.steps||[]).map(e=>e.stringValue||e),videos:this.parseVideos(e.videos),currentVideoPosition:parseInt(e.currentVideoPosition?.integerValue||e.currentVideoPosition||"0"),reps:e.reps?.stringValue||e.reps||"",sets:parseInt(e.sets?.integerValue||e.sets||"0"),weight:parseFloat(e.weight?.doubleValue||e.weight||"0"),author:this.parseExerciseAuthor(e.author?.mapValue?.fields||e.author||{}),createdAt:new Date(1e3*parseFloat(e.createdAt?.doubleValue||e.createdAt||"0")),updatedAt:new Date(1e3*parseFloat(e.updatedAt?.doubleValue||e.updatedAt||"0"))}}parseExerciseCategory(e){return"cardio"===(e.id?.stringValue||e.id||"")?{type:"cardio",details:{duration:parseInt(e.duration?.integerValue||e.duration||"0"),bpm:parseInt(e.bpm?.integerValue||e.bpm||"0"),calories:parseInt(e.calories?.integerValue||e.calories||"0"),screenTime:parseInt(e.screenTime?.integerValue||e.screenTime||"0"),selectedVideo:this.parseExerciseVideo(e.selectedVideo?.mapValue?.fields||e.selectedVideo)}}:{type:"weightTraining",details:{reps:e.reps?.stringValue||e.reps||"",sets:parseInt(e.sets?.integerValue||e.sets||"0"),weight:parseFloat(e.weight?.doubleValue||e.weight||"0"),screenTime:parseInt(e.screenTime?.integerValue||e.screenTime||"0"),selectedVideo:this.parseExerciseVideo(e.selectedVideo?.mapValue?.fields||e.selectedVideo)}}}parseBodyParts(e){return(e?.arrayValue?.values||e||[]).map(e=>e.stringValue||e)}parseVideos(e){return(e?.arrayValue?.values||e||[]).map(e=>this.parseExerciseVideo(e.mapValue?.fields||e))}parseExerciseVideo(e){return{id:e.id?.stringValue||e.id||"",exerciseId:e.exerciseId?.stringValue||e.exerciseId||"",username:e.username?.stringValue||e.username||"",userId:e.userId?.stringValue||e.userId||"",videoURL:e.videoURL?.stringValue||e.videoURL||"",fileName:e.fileName?.stringValue||e.fileName||"",exercise:e.exercise?.stringValue||e.exercise||"",profileImage:this.parseProfileImage(e.profileImage?.mapValue?.fields||e.profileImage||{}),caption:e.caption?.stringValue||e.caption||"",gifURL:e.gifURL?.stringValue||e.gifURL||"",thumbnail:e.thumbnail?.stringValue||e.thumbnail||"",visibility:e.visibility?.stringValue||e.visibility||"open",totalAccountsReached:parseInt(e.totalAccountsReached?.integerValue||e.totalAccountsReached||"0"),totalAccountLikes:parseInt(e.totalAccountLikes?.integerValue||e.totalAccountLikes||"0"),totalAccountBookmarked:parseInt(e.totalAccountBookmarked?.integerValue||e.totalAccountBookmarked||"0"),totalAccountUsage:parseInt(e.totalAccountUsage?.integerValue||e.totalAccountUsage||"0"),isApproved:e.isApproved?.booleanValue||e.isApproved||!1,liked:e.liked?.booleanValue||e.liked,bookmarked:e.bookmarked?.booleanValue||e.bookmarked,createdAt:new Date(1e3*parseFloat(e.createdAt?.doubleValue||e.createdAt||"0")),updatedAt:new Date(1e3*parseFloat(e.updatedAt?.doubleValue||e.updatedAt||"0"))}}parseProfileImage(e){return{profileImageURL:e.profileImageURL?.stringValue||e.profileImageURL||"",imageOffsetWidth:parseFloat(e.imageOffsetWidth?.doubleValue||e.imageOffsetWidth||"0"),imageOffsetHeight:parseFloat(e.imageOffsetHeight?.doubleValue||e.imageOffsetHeight||"0")}}parseExerciseAuthor(e){return{userId:e.userId?.stringValue||e.userId||"",username:e.username?.stringValue||e.username||""}}async fetchSavedWorkout(e,t){try{let r=(0,a.JU)(o.db,"users",e,"MyCreatedWorkouts",t),s=await (0,a.QT)(r);if(!s.exists())return[null,null];let i=await this.fetchAndMapExercisesWithVideos(),n=s.data(),d=(n.exercises||[]).map(e=>{let t=i.find(t=>t.name===e.exercise.name);return{...e,exercise:t||e.exercise}});n.exercises=d;let l=this.parseWorkoutData(n),c=(0,a.hJ)(r,"logs"),g=(await (0,a.PL)(c)).docs.map(r=>{let a=r.data(),o=i.find(e=>e.name===a.exercise.name);return{id:r.id,workoutId:t,userId:e,exercise:o||a.exercise,logs:a.log||[],feedback:a.feedback||"",note:a.note||"",recommendedWeight:a.recommendedWeight,isSplit:a.isSplit||!1,isBodyWeight:a.isBodyWeight||!1,logSubmitted:a.logSubmitted||!1,logIsEditing:a.logIsEditing||!1,isCompleted:a.isCompleted||!1,createdAt:(0,u.Q)(a.createdAt),updatedAt:(0,u.Q)(a.updatedAt)}});return l.logs=g,[l,g]}catch(e){return console.error("Error fetching saved workout:",e),[null,null]}}async fetchUserChallengesByChallengeId(e){let t=(0,a.hJ)(o.db,"user-challenge"),r=(0,a.IO)(t,(0,a.ar)("challengeId","==",e));try{return(await (0,a.PL)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:l(t.createdAt),updatedAt:l(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by challengeId:",e),e}}async getCollectionById(e){try{let t=(0,a.JU)(o.db,"sweatlist-collection",e),r=await (0,a.QT)(t);if(r.exists())return new n.No({id:r.id,...r.data()});throw Error("Collection not found")}catch(e){throw console.error("Error getting collection by ID:",e),e}}async fetchActiveChallenges(){let e=s.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,a.hJ)(o.db,"user-challenge"),r=(0,a.IO)(t,(0,a.ar)("userId","==",e.id));try{return(await (0,a.PL)(r)).docs.map(e=>{let t=e.data(),r=t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:(0,u.Q)(t.challenge.startDate),endDate:(0,u.Q)(t.challenge.endDate),createdAt:(0,u.Q)(t.challenge.createdAt),updatedAt:(0,u.Q)(t.challenge.updatedAt),introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0;return{id:e.id,...t,challenge:r,createdAt:(0,u.Q)(t.createdAt),updatedAt:(0,u.Q)(t.updatedAt)}}).filter(e=>{let t=e.challenge?.endDate;return t&&t>new Date})}catch(e){throw console.error("Error fetching active challenges:",e),e}}async fetchUserChallenges(){let e=s.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,a.hJ)(o.db,"user-challenge"),r=(0,a.IO)(t,(0,a.ar)("userId","==",e.id));try{return(await (0,a.PL)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching user challenges:",e),Error("Failed to fetch user challenges")}}async updateWorkoutLogs(e){let{userId:t,workoutId:r,logs:s}=e;try{let e=(0,a.JU)(o.db,"users",t,"workoutSessions",r),i=(0,a.hJ)(e,"logs"),n=(0,a.qs)(o.db);s.forEach(e=>{let t=(0,a.JU)(i,e.id);n.update(t,{isCompleted:e.isCompleted,logs:e.logs,updatedAt:c()})}),await n.commit()}catch(e){throw console.error("Error updating workout logs:",e),e}}async fetchCurrentWorkoutSession(e){if(!e)throw Error("No user ID provided");let t=await (0,a.PL)((0,a.hJ)(o.db,"exercises")),r=(await (0,a.PL)((0,a.hJ)(o.db,"exerciseVideos"))).docs.map(e=>i.Ax.fromFirebase({id:e.id,...e.data()})),s=t.docs.map(e=>{let t=i.cd.fromFirebase({id:e.id,...e.data()}),a=r.filter(e=>e.exercise.toLowerCase()===t.name.toLowerCase());return{...t,videos:a}}),d=(0,a.hJ)(o.db,"users",e,"workoutSessions"),l=(0,a.IO)(d,(0,a.ar)("status","==",n.Z0.QueuedUp)),c=await (0,a.PL)(l);return c.empty&&(l=(0,a.IO)(d,(0,a.ar)("status","==",n.Z0.InProgress)),(c=await (0,a.PL)(l)).empty)?{workout:null,logs:null}:this.processWorkoutSessionDocument(c.docs[0],s)}async cancelWorkoutSession(e,t){try{let r=(0,a.hJ)(o.db,"users",e,"workoutSessions",t,"logs"),s=await (0,a.PL)(r),i=(0,a.qs)(o.db);s.empty||(s.docs.forEach(e=>{i.delete(e.ref)}),await i.commit());let n=(0,a.JU)(o.db,"users",e,"workoutSessions",t);await (0,a.oe)(n)}catch(e){throw console.error("Error canceling workout session:",e),e}}async fetchAndMapExercisesWithVideos(){try{let e=(await (0,a.PL)((0,a.hJ)(o.db,"exercises"))).docs.map(e=>i.cd.fromFirebase({id:e.id,...e.data()})),t=(await (0,a.PL)((0,a.hJ)(o.db,"exerciseVideos"))).docs.map(e=>i.Ax.fromFirebase({id:e.id,...e.data()}));return e.map(e=>{let r=t.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return{...e,videos:r}})}catch(e){throw console.error("Error fetching and mapping exercises with videos:",e),e}}async fetchAllWorkoutSessions(e){if(!e)throw Error("No user ID provided");try{let t=(await (0,a.PL)((0,a.hJ)(o.db,"exercises"))).docs.map(e=>i.cd.fromFirebase({id:e.id,...e.data()})),r=(await (0,a.PL)((0,a.hJ)(o.db,"exerciseVideos"))).docs.map(e=>i.Ax.fromFirebase({id:e.id,...e.data()})),s=t.map(e=>{let t=r.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return{...e,videos:t}}),n=(0,a.hJ)(o.db,"users",e,"workoutSessions"),d=await (0,a.PL)(n);if(d.empty)return console.log("No workout sessions found for user"),[];return await Promise.all(d.docs.map(async e=>{let t=await this.processWorkoutSessionDocument(e,s);return t.logs&&t.logs.sort((e,t)=>{let r=e.order??0,a=t.order??0;return r-a}),t}))}catch(e){throw console.error("Error fetching workout sessions:",e),e}}async processWorkoutSessionDocument(e,t){let r=e.data(),o=(r.exercises||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),a=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:a||e.exercise}}),s=new n.oQ({id:e.id,roundWorkoutId:r.roundWorkoutId||"",exercises:o,title:r.title||"",description:r.description||"",duration:r.duration||0,useAuthorContent:r.useAuthorContent||!1,isCompleted:r.isCompleted||!1,workoutStatus:r.workoutStatus||n.Z0.Archived,author:r.author||"",createdAt:(0,u.Q)(r.createdAt),updatedAt:(0,u.Q)(r.updatedAt),startTime:(0,u.Q)(r.startTime),collectionId:r.collectionId,challenge:r.challenge,logs:(r.logs||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),a=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:a||e.exercise}}),workoutRating:r.workoutRating,order:r.order,zone:r.zone||n.Bc.FullBody});console.log("The Workout ID is: "+s.id);let d=(0,a.hJ)(e.ref,"logs"),l=(await (0,a.PL)(d)).docs.map(e=>{let r=e.data(),a=r.exercise?.name?.toLowerCase().trim(),o=t.find(e=>e.name.toLowerCase().trim()===a),n={...r,id:e.id,workoutId:s.id,exercise:o||r.exercise,createdAt:(0,u.Q)(r.createdAt),updatedAt:(0,u.Q)(r.updatedAt)};return new i.lg(n)});return{workout:s,logs:l}}async saveWorkoutSession(e){let{userId:t,workout:r,logs:s}=e;if(!t)throw Error("No user ID provided");try{let e=new Date,i=new n.oQ({...r,roundWorkoutId:`${r.id}-${e.getTime()}`,workoutStatus:n.Z0.QueuedUp,createdAt:e,updatedAt:e,startTime:e,logs:[]}),d=(0,a.JU)((0,a.hJ)(o.db,"users",t,"workoutSessions"));await (0,a.pl)(d,i);let l=(0,a.hJ)(d,"logs"),c=(0,a.qs)(o.db);return s.forEach((t,r)=>{let o=(0,a.JU)(l,`${t.id}-${e.getTime()}`);c.set(o,{id:o.id,workoutId:d.id,exercise:{id:t.exercise.id,name:t.exercise.name,category:t.exercise.category,videos:t.exercise.videos||[]},order:r,createdAt:e,updatedAt:e,logSubmitted:!1,isCompleted:!1})}),await c.commit(),i}catch(e){throw console.error("Error saving workout session:",e),e}}async joinChallenge(e){let{username:t,challengeId:r}=e;if(!s.W4.currentUser)throw Error("No user is signed in");let i=(0,a.hJ)(o.db,"users"),n=(0,a.IO)(i,(0,a.ar)("username","==",t)),d=await (0,a.PL)(n);if(d.empty)throw Error("User not found");let l=d.docs[0],c=l.data(),u=l.id,g=(0,a.JU)(o.db,"sweatlist-collection",r),h=await (0,a.QT)(g);if(!h.exists())throw Error("Challenge not found");let p=h.data(),m=`${r}-${u}-${Date.now()}`,w={id:m,challenge:p,challengeId:r,userId:u,fcmToken:c.fcmToken||"",profileImage:c.profileImage||{},progress:0,completedWorkouts:[],isCompleted:!1,uid:u,location:c.location||null,city:"",country:"",timezone:"",username:t,joinDate:new Date,createdAt:new Date,updatedAt:new Date,pulsePoints:{baseCompletion:0,firstCompletion:0,streakBonus:0,checkInBonus:0,effortRating:0,chatParticipation:0,locationCheckin:0,contentEngagement:0,encouragementSent:0,encouragementReceived:0},currentStreak:0,encouragedUsers:[],encouragedByUsers:[],checkIns:[]};await (0,a.pl)((0,a.JU)(o.db,"user-challenge",m),w)}constructor(){this._currentWorkout=null,this._currentWorkoutLogs=[]}}let h=new g}}]);
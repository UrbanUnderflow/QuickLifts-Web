"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[586],{9586:function(e,t,r){r.d(t,{G:function(){return w}});var o=r(109),a=r(7333),s=r(7705),i=r(3530),n=r(4454),d=r(2066);let l=e=>e?e._seconds?new Date(1e3*e._seconds).toISOString():e.seconds?new Date(1e3*e.seconds).toISOString():e.toDate&&"function"==typeof e.toDate?e.toDate().toISOString():e instanceof Date?e.toISOString():null:null;var c=r(2778),u=r(9384),h=r(8381);class g{get currentWorkout(){return u.h.getState().workout.currentWorkout}set currentWorkout(e){u.h.dispatch((0,h.q1)(e))}get currentWorkoutLogs(){return u.h.getState().workout.currentExerciseLogs}set currentWorkoutLogs(e){u.h.dispatch((0,h.HX)(e))}get currentWorkoutSummary(){return u.h.getState().workout.workoutSummary}set currentWorkoutSummary(e){u.h.dispatch((0,h.QU)(e))}async fetchCurrentWorkout(e){return(await this.fetchCurrentWorkoutSession(e)).workout}async getAllSweatlists(e){if(!e)throw Error("User ID is required");let t=(0,o.hJ)(a.db,"users",e,"MyCreatedWorkouts");try{let r=await this.fetchAndMapExercisesWithVideos(),s=await (0,o.PL)(t),i=[];for(let t of s.docs){let s=t.data(),d=t.id,l=(s.exercises||[]).map(e=>{let t=r.find(t=>t.name===e.exercise.name);return console.log("This is the mapped exercise: "+t),{...e,exercise:t||e}}),c=new n.oQ({id:s.id||"",roundWorkoutId:s.roundWorkoutId||"",collectionId:s.collectionId,exercises:l,challenge:s.challenge,logs:[],title:s.title||"",description:s.description||"",duration:s.duration||0,workoutRating:s.workoutRating,useAuthorContent:s.useAuthorContent||!1,isCompleted:s.isCompleted||!1,workoutStatus:s.workoutStatus||"notStarted",startTime:s.startTime?new Date(s.startTime):void 0,order:s.order,author:s.author||e,createdAt:s.createdAt?new Date(s.createdAt):new Date,updatedAt:s.updatedAt?new Date(s.updatedAt):new Date,zone:s.zone||"FULL_BODY"}),u=(0,o.hJ)(a.db,"users",e,"MyCreatedWorkouts",d,"logs"),h=await (0,o.PL)(u);c.logs=h.docs.map(e=>({...e.data(),id:e.id})),i.push(c)}return i}catch(e){throw console.error("Error fetching sweatlists:",e.message),Error("Failed to fetch sweatlists")}}async getUserChallengesByChallengeId(e){let t=(0,o.hJ)(a.db,"user-challenge"),r=(0,o.IO)(t,(0,o.ar)("challengeId","==",e));try{let e=(await (0,o.PL)(r)).docs.map(e=>{let t=e.data();return new n.lM(e.id,t)});if(e.length>0)return{userChallenges:e};return{userChallenges:[],error:"No user challenges found for this challenge."}}catch(e){return console.error("Error fetching user challenges by challengeId:",e),{userChallenges:[],error:e instanceof Error?e.message:"Unknown error"}}}async fetchWorkoutSummaries(e){let t=s.W4.currentUser;if(!t?.id)throw Error("No user is signed in");let r=(0,d.WU)(e,"MM-dd-yyyy"),i=(0,o.hJ)(a.db,"users",t.id,"workoutSummaries"),n=(0,o.IO)(i,(0,o.ar)("date","==",r));try{return(await (0,o.PL)(n)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching workout summaries:",e.message),Error(e.message)}}async fetchAllWorkoutSummaries(){let e=s.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,o.hJ)(a.db,"users",e.id,"workoutSummary"),r=(0,o.IO)(t,(0,o.Xo)("createdAt","asc"));try{return(await (0,o.PL)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching all workout summaries:",e.message),Error(e.message)}}async fetchUserChallengesByUserId(e){let t=(0,o.hJ)(a.db,"user-challenge"),r=(0,o.IO)(t,(0,o.ar)("userId","==",e));try{return(await (0,o.PL)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:l(t.createdAt),updatedAt:l(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by userId:",e),e}}async fetchCollectionWithSweatLists(e){try{let t=await this.getCollectionById(e),r=[];for(let e of t.sweatlistIds||[])try{let[t]=await this.fetchSavedWorkout(e.sweatlistAuthorId,e.id);t&&r.push(t)}catch(t){console.error(`Error fetching workout ${e.id}:`,t)}return{collection:t,sweatLists:r}}catch(e){throw console.error("Error fetching collection with sweat lists:",e),e}}async fetchSavedWorkout(e,t){try{let r=(0,o.JU)(a.db,"users",e,"MyCreatedWorkouts",t),s=await (0,o.QT)(r);if(!s.exists())return[null,null];let d=await this.fetchAndMapExercisesWithVideos(),l=s.data(),u=(l.exercises||[]).map(e=>{let t=d.find(t=>t.name===e.exercise.name);return{...e,exercise:t||e.exercise}});l.exercises=u;let h=new n.oQ({id:l.id,roundWorkoutId:l.roundWorkoutId,collectionId:l.collectionId,exercises:l.exercises,challenge:l.challenge,logs:l.logs,title:l.title,description:l.description,duration:l.duration,workoutRating:l.workoutRating,useAuthorContent:l.useAuthorContent,isCompleted:l.isCompleted,workoutStatus:l.workoutStatus,startTime:l.startTime,order:l.order,author:l.author,assignedDate:l.assignedDate,createdAt:l.createdAt,updatedAt:l.updatedAt}),g=(0,o.hJ)(r,"logs"),w=(await (0,o.PL)(g)).docs.map(r=>{let o=r.data(),a=d.find(e=>e.name===o.exercise.name);return new i.lg({id:r.id,workoutId:t,userId:e,exercise:a||o.exercise,logs:o.log||[],feedback:o.feedback||"",note:o.note||"",recommendedWeight:o.recommendedWeight,isSplit:o.isSplit||!1,isBodyWeight:o.isBodyWeight||!1,logSubmitted:o.logSubmitted||!1,logIsEditing:o.logIsEditing||!1,isCompleted:o.isCompleted||!1,completedAt:(0,c.Q)(o.completedAt),createdAt:(0,c.Q)(o.createdAt),updatedAt:(0,c.Q)(o.updatedAt)})});return h.logs=w,[h,w]}catch(e){return console.error("Error fetching saved workout:",e),[null,null]}}async fetchUserChallengesByChallengeId(e){let t=(0,o.hJ)(a.db,"user-challenge"),r=(0,o.IO)(t,(0,o.ar)("challengeId","==",e));try{return(await (0,o.PL)(r)).docs.map(e=>{let t=e.data();return{id:e.id,...t,challenge:t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:t.challenge.startDate?new Date(t.challenge.startDate):new Date,endDate:t.challenge.endDate?new Date(t.challenge.endDate):new Date,createdAt:t.challenge.createdAt?new Date(t.challenge.createdAt):new Date,updatedAt:t.challenge.updatedAt?new Date(t.challenge.updatedAt):new Date,introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0,createdAt:l(t.createdAt),updatedAt:l(t.updatedAt)}})}catch(e){throw console.error("Error fetching user challenges by challengeId:",e),e}}async getCollectionById(e){console.log("Fetching collection with id:",e);try{let t=(0,o.JU)(a.db,"sweatlist-collection",e),r=await (0,o.QT)(t);if(r.exists())return new n.No({id:r.id,...r.data()});throw Error("Collection not found")}catch(e){throw console.error("Error getting collection by ID:",e),e}}async fetchActiveChallenges(){let e=s.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,o.hJ)(a.db,"user-challenge"),r=(0,o.IO)(t,(0,o.ar)("userId","==",e.id));try{return(await (0,o.PL)(r)).docs.map(e=>{let t=e.data(),r=t.challenge?new n.tv({id:t.challenge.id,title:t.challenge.title,subtitle:t.challenge.subtitle,participants:t.challenge.participants||[],status:t.challenge.status,startDate:(0,c.Q)(t.challenge.startDate),endDate:(0,c.Q)(t.challenge.endDate),createdAt:(0,c.Q)(t.challenge.createdAt),updatedAt:(0,c.Q)(t.challenge.updatedAt),introVideos:(t.challenge.introVideos||[]).map(e=>new n.L$({id:e.id,userId:e.userId,videoUrl:e.videoUrl}))}):void 0;return{id:e.id,...t,challenge:r,createdAt:(0,c.Q)(t.createdAt),updatedAt:(0,c.Q)(t.updatedAt)}}).filter(e=>{let t=e.challenge?.endDate;return t&&t>new Date})}catch(e){throw console.error("Error fetching active challenges:",e),e}}async fetchUserChallenges(){let e=s.W4.currentUser;if(!e?.id)throw Error("No user is signed in");let t=(0,o.hJ)(a.db,"user-challenge"),r=(0,o.IO)(t,(0,o.ar)("userId","==",e.id));try{return(await (0,o.PL)(r)).docs.map(e=>({id:e.id,...e.data()}))}catch(e){throw console.error("Error fetching user challenges:",e),Error("Failed to fetch user challenges")}}async updateWorkoutSummary(e){let{userId:t,workoutId:r,summary:s}=e;if(!t)throw Error("No user ID provided");try{let e=(0,o.JU)(a.db,"users",t,"workoutSummary",s.id),r={id:s.id,workoutId:s.workoutId,exercises:s.exercises,bodyParts:s.bodyParts,secondaryBodyParts:s.secondaryBodyParts,workoutTitle:s.workoutTitle,caloriesBurned:s.caloriesBurned,workoutRating:s.workoutRating,exercisesCompleted:s.exercisesCompleted,aiInsight:s.aiInsight,recommendations:s.recommendations,gifURLs:s.gifURLs,recommendedWork:s.recommendedWork,isCompleted:s.isCompleted,createdAt:s.createdAt,updatedAt:new Date,completedAt:s.completedAt,duration:s.duration};await (0,o.pl)(e,r,{merge:!0}),console.log("Workout summary document updated successfully")}catch(e){throw console.error("Error updating workout summary:",e),e}}async updateWorkoutLogs(e){let{userId:t,workoutId:r,logs:s}=e;try{let e=(0,o.JU)(a.db,"users",t,"workoutSessions",r),i=(0,o.hJ)(e,"logs"),n=(0,o.qs)(a.db);s.forEach(e=>{let t=(0,o.JU)(i,e.id);n.update(t,{...e.toDictionary()})}),await n.commit()}catch(e){throw console.error("Error updating workout logs:",e),e}}async cancelWorkout(e,t){if(!s.W4.currentUser?.id||!e)throw Error("User not authenticated.");try{await this.deleteWorkoutSession(e.id),t&&await this.deleteWorkoutSummary(t.id),this.cleanUpWorkoutInProgress(),console.log("Workout canceled and cleaned up successfully.")}catch(e){throw console.error("Error canceling workout:",e),e}}async deleteWorkoutSession(e){if(!s.W4.currentUser?.id||!e)throw Error("User not authenticated.");let t=s.W4.currentUser.id,r=(0,o.JU)(a.db,"users",t,"workoutSessions",e);try{let e=(0,o.hJ)(r,"logs"),t=await (0,o.PL)(e),s=(0,o.qs)(a.db);t.docs.forEach(e=>{s.delete(e.ref)}),s.delete(r),await s.commit(),console.log("Workout session and logs deleted successfully.")}catch(e){throw console.error("Error deleting workout session:",e),e}}async deleteWorkoutSummary(e){if(e&&s.W4.currentUser?.id)try{let t=(0,o.JU)(a.db,"users",s.W4.currentUser.id,"workoutSummary",e);await (0,o.oe)(t),console.log("Workout summary deleted successfully.")}catch(e){throw console.error("Error deleting workout summary:",e),e}}cleanUpWorkoutInProgress(){u.h.dispatch((0,h.gf)())}async fetchCurrentWorkoutSession(e){if(!e)throw Error("No user ID provided");let t=await (0,o.PL)((0,o.hJ)(a.db,"exercises")),r=(await (0,o.PL)((0,o.hJ)(a.db,"exerciseVideos"))).docs.map(e=>i.Ax.fromFirebase({id:e.id,...e.data()})),s=t.docs.map(e=>{let t=i.cd.fromFirebase({id:e.id,...e.data()}),o=r.filter(e=>e.exercise.toLowerCase()===t.name.toLowerCase());return new i.cd({...t,videos:o})}),d=(0,o.hJ)(a.db,"users",e,"workoutSessions"),l=(0,o.IO)(d,(0,o.ar)("status","==",n.Z0.QueuedUp)),c=await (0,o.PL)(l);return c.empty&&(l=(0,o.IO)(d,(0,o.ar)("status","==",n.Z0.InProgress)),(c=await (0,o.PL)(l)).empty)?{workout:null,logs:null}:this.processWorkoutSessionDocument(c.docs[0],s)}async fetchAndMapExercisesWithVideos(){try{let e=(await (0,o.PL)((0,o.hJ)(a.db,"exercises"))).docs.map(e=>i.cd.fromFirebase({id:e.id,...e.data()})),t=(await (0,o.PL)((0,o.hJ)(a.db,"exerciseVideos"))).docs.map(e=>i.Ax.fromFirebase({id:e.id,...e.data()}));return e.map(e=>{let r=t.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return new i.cd({...e,videos:r})})}catch(e){throw console.error("Error fetching and mapping exercises with videos:",e),e}}async fetchAllWorkoutSessions(e){if(!e)throw Error("No user ID provided");try{let t=(await (0,o.PL)((0,o.hJ)(a.db,"exercises"))).docs.map(e=>i.cd.fromFirebase({id:e.id,...e.data()})),r=(await (0,o.PL)((0,o.hJ)(a.db,"exerciseVideos"))).docs.map(e=>i.Ax.fromFirebase({id:e.id,...e.data()})),s=t.map(e=>{let t=r.filter(t=>t.exercise.toLowerCase()===e.name.toLowerCase());return new i.cd({...e,videos:t})}),n=(0,o.hJ)(a.db,"users",e,"workoutSessions"),d=await (0,o.PL)(n);if(d.empty)return console.log("No workout sessions found for user"),[];return await Promise.all(d.docs.map(async e=>{let t=await this.processWorkoutSessionDocument(e,s);return t.logs&&t.logs.sort((e,t)=>{let r=e.order??0,o=t.order??0;return r-o}),t}))}catch(e){throw console.error("Error fetching workout sessions:",e),e}}async updateCollection(e){try{let t=(0,o.hJ)(a.db,"sweatlist-collection");if(!e.id||""===e.id.trim()){let r=(0,o.JU)(t);e.id=r.id}return e.challenge&&(e.challenge.id=e.id),e.updatedAt=new Date,await (0,o.pl)((0,o.JU)(t,e.id),e.toDictionary()),console.log("Collection updated successfully"),e}catch(e){throw console.error("Error updating collection document:",e),Error("Error while updating the collection")}}async processWorkoutSessionDocument(e,t){let r=e.data(),a=(r.exercises||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),o=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:o||e.exercise}}),s=new n.oQ({id:e.id,roundWorkoutId:r.roundWorkoutId||"",exercises:a,title:r.title||"",description:r.description||"",duration:r.duration||0,useAuthorContent:r.useAuthorContent||!1,isCompleted:r.isCompleted||!1,workoutStatus:r.workoutStatus||n.Z0.Archived,author:r.author||"",createdAt:(0,c.Q)(r.createdAt),updatedAt:(0,c.Q)(r.updatedAt),startTime:(0,c.Q)(r.startTime),collectionId:r.collectionId,challenge:r.challenge,logs:(r.logs||[]).map(e=>{let r=e.exercise?.name?.toLowerCase().trim(),o=t.find(e=>e.name.toLowerCase().trim()===r);return{...e,exercise:o||e.exercise}}),workoutRating:r.workoutRating,order:r.order,zone:r.zone||n.Bc.FullBody});console.log("The Workout ID is: "+s.id);let d=(0,o.hJ)(e.ref,"logs"),l=(await (0,o.PL)(d)).docs.map(e=>{let r=e.data(),o=r.exercise?.name?.toLowerCase().trim(),a=t.find(e=>e.name.toLowerCase().trim()===o),n={...r,id:e.id,workoutId:s.id,exercise:a||r.exercise,createdAt:(0,c.Q)(r.createdAt),updatedAt:(0,c.Q)(r.updatedAt)};return new i.lg(n)});return{workout:s,logs:l}}async saveWorkoutSession(e){let{userId:t,workout:r,logs:s}=e;if(!t)throw Error("No user ID provided");try{let e=new Date,i=new n.oQ({...r,roundWorkoutId:`${r.id}-${e.getTime()}`,workoutStatus:n.Z0.QueuedUp,createdAt:e,updatedAt:e,startTime:e,logs:[]}),d=(0,o.JU)((0,o.hJ)(a.db,"users",t,"workoutSessions"));await (0,o.pl)(d,i);let l=(0,o.hJ)(d,"logs"),c=(0,o.qs)(a.db);return s.forEach((t,r)=>{let a=(0,o.JU)(l,`${t.id}-${e.getTime()}`);c.set(a,{id:a.id,workoutId:d.id,exercise:{id:t.exercise.id,name:t.exercise.name,category:t.exercise.category,videos:t.exercise.videos||[]},order:r,createdAt:e,updatedAt:e,logSubmitted:!1,isCompleted:!1})}),await c.commit(),i}catch(e){throw console.error("Error saving workout session:",e),e}}async joinChallenge(e){let{username:t,challengeId:r}=e;if(!s.W4.currentUser)throw Error("No user is signed in");let i=(0,o.hJ)(a.db,"users"),n=(0,o.IO)(i,(0,o.ar)("username","==",t)),d=await (0,o.PL)(n);if(d.empty)throw Error("User not found");let l=d.docs[0],c=l.data(),u=l.id,h=(0,o.JU)(a.db,"sweatlist-collection",r),g=await (0,o.QT)(h);if(!g.exists())throw Error("Challenge not found");let w=g.data(),m=`${r}-${u}-${Date.now()}`,p={id:m,challenge:w,challengeId:r,userId:u,fcmToken:c.fcmToken||"",profileImage:c.profileImage||{},progress:0,completedWorkouts:[],isCompleted:!1,uid:u,location:c.location||null,city:"",country:"",timezone:"",username:t,joinDate:new Date,createdAt:new Date,updatedAt:new Date,pulsePoints:{baseCompletion:0,firstCompletion:0,streakBonus:0,checkInBonus:0,effortRating:0,chatParticipation:0,locationCheckin:0,contentEngagement:0,encouragementSent:0,encouragementReceived:0},currentStreak:0,encouragedUsers:[],encouragedByUsers:[],checkIns:[]};await (0,o.pl)((0,o.JU)(a.db,"user-challenge",m),p)}}let w=new g}}]);
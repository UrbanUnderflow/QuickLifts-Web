{"ast":null,"code":"var _jsxFileName = \"/Users/tre/Documents/GitHub/QuickLifts-web/src/pages/CompletedOnboarding.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompletedOnboarding = () => {\n  _s();\n  const location = useLocation();\n  const [loading, setLoading] = useState(true);\n  const [success, setSuccess] = useState(false);\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const userId = queryParams.get('userId');\n    if (!userId) {\n      console.error('UserId is missing');\n      setLoading(false); // Stop loading if userId is missing\n      return;\n    }\n    const updateOnboardingStatus = async () => {\n      try {\n        const response = await fetch(`https://your-website.com/.netlify/functions/complete-stripe-onboarding?userId=${userId}`, {\n          method: 'POST',\n          // Adjust according to your endpoint method\n          headers: {\n            'Content-Type': 'application/json'\n            // Include any other necessary headers\n          }\n          // If your endpoint requires a body, include it here\n        });\n\n        const data = await response.json();\n        console.log('Onboarding status updated:', data);\n        if (data.success) {\n          setSuccess(true); // Set success state based on response\n        }\n\n        setLoading(false); // Stop loading after receiving the response\n      } catch (error) {\n        console.error('Failed to update onboarding status:', error);\n        setLoading(false); // Stop loading in case of error\n      }\n    };\n\n    updateOnboardingStatus();\n  }, [location.search]);\n  if (!loading && !success) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen bg-white text-black text-center font-avenir text-2xl\",\n      children: \"Page Not Found or Error in Onboarding Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen bg-[#E0FE10] text-black text-center font-avenir text-2xl\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) // Display this while waiting for the response\n    : success && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You have completed your Stripe Onboarding! \\uD83C\\uDF89\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 20\n    }, this) // Display this if the onboarding update was successful\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(CompletedOnboarding, \"41qGrhRqMOc707F2IwFw4mKV/F4=\", false, function () {\n  return [useLocation];\n});\n_c = CompletedOnboarding;\nexport default CompletedOnboarding;\nvar _c;\n$RefreshReg$(_c, \"CompletedOnboarding\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","CompletedOnboarding","_s","location","loading","setLoading","success","setSuccess","queryParams","URLSearchParams","search","userId","get","console","error","updateOnboardingStatus","response","fetch","method","headers","data","json","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tre/Documents/GitHub/QuickLifts-web/src/pages/CompletedOnboarding.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst CompletedOnboarding = () => {\n  const location = useLocation();\n  const [loading, setLoading] = useState(true);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const userId = queryParams.get('userId');\n\n    if (!userId) {\n      console.error('UserId is missing');\n      setLoading(false); // Stop loading if userId is missing\n      return;\n    }\n\n    const updateOnboardingStatus = async () => {\n      try {\n        const response = await fetch(`https://your-website.com/.netlify/functions/complete-stripe-onboarding?userId=${userId}`, {\n          method: 'POST', // Adjust according to your endpoint method\n          headers: {\n            'Content-Type': 'application/json',\n            // Include any other necessary headers\n          },\n          // If your endpoint requires a body, include it here\n        });\n\n        const data = await response.json();\n        console.log('Onboarding status updated:', data);\n\n        if (data.success) {\n          setSuccess(true); // Set success state based on response\n        }\n        setLoading(false); // Stop loading after receiving the response\n      } catch (error) {\n        console.error('Failed to update onboarding status:', error);\n        setLoading(false); // Stop loading in case of error\n      }\n    };\n\n    updateOnboardingStatus();\n  }, [location.search]);\n\n  if (!loading && !success) {\n    return (\n      <div className=\"flex justify-center items-center h-screen bg-white text-black text-center font-avenir text-2xl\">\n        Page Not Found or Error in Onboarding Process\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex justify-center items-center h-screen bg-[#E0FE10] text-black text-center font-avenir text-2xl\">\n      {loading ? (\n        <div>Loading...</div> // Display this while waiting for the response\n      ) : (\n        success && <div>You have completed your Stripe Onboarding! ðŸŽ‰</div> // Display this if the onboarding update was successful\n      )}\n    </div>\n  );\n};\n\nexport default CompletedOnboarding;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAG,IAAIC,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC;IACxD,MAAMC,MAAM,GAAGH,WAAW,CAACI,GAAG,CAAC,QAAQ,CAAC;IAExC,IAAI,CAACD,MAAM,EAAE;MACXE,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;MAClCT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACnB;IACF;IAEA,MAAMU,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iFAAgFN,MAAO,EAAC,EAAE;UACtHO,MAAM,EAAE,MAAM;UAAE;UAChBC,OAAO,EAAE;YACP,cAAc,EAAE;YAChB;UACF;UACA;QACF,CAAC,CAAC;;QAEF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCR,OAAO,CAACS,GAAG,CAAC,4BAA4B,EAAEF,IAAI,CAAC;QAE/C,IAAIA,IAAI,CAACd,OAAO,EAAE;UAChBC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QACpB;;QACAF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;;IAEDU,sBAAsB,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACZ,QAAQ,CAACO,MAAM,CAAC,CAAC;EAErB,IAAI,CAACN,OAAO,IAAI,CAACE,OAAO,EAAE;IACxB,oBACEN,OAAA;MAAKuB,SAAS,EAAC,gGAAgG;MAAAC,QAAA,EAAC;IAEhH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEV;EAEA,oBACE5B,OAAA;IAAKuB,SAAS,EAAC,oGAAoG;IAAAC,QAAA,EAChHpB,OAAO,gBACNJ,OAAA;MAAAwB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC;IAAA,EAEtBtB,OAAO,iBAAIN,OAAA;MAAAwB,QAAA,EAAK;IAA6C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC;EACrE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA3DID,mBAAmB;EAAA,QACNH,WAAW;AAAA;AAAA+B,EAAA,GADxB5B,mBAAmB;AA6DzB,eAAeA,mBAAmB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
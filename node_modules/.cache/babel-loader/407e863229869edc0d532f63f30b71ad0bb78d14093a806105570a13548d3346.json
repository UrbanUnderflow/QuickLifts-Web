{"ast":null,"code":"var _jsxFileName = \"/Users/tre/Documents/GitHub/QuickLifts-web/src/pages/CompletedOnboarding.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; // This assumes you're using react-router-dom\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompletedOnboarding = () => {\n  _s();\n  const location = useLocation();\n  useEffect(() => {\n    // Extract the userId from the URL query parameters\n    const queryParams = new URLSearchParams(location.search);\n    const userId = queryParams.get('userId');\n\n    // Function to call the endpoint that updates the onboarding status\n    const updateOnboardingStatus = async () => {\n      try {\n        // Extract userId from URL or store it in a way you can retrieve here\n        const userId = 'theUserId'; // Replace this with the actual way you get the userId\n\n        // Call the function/endpoint to update the onboarding status\n        // Replace `yourUpdateFunctionEndpoint` with your actual function's endpoint\n        const response = await fetch(`https://your-website.com/.netlify/functions/complete-stripe-onboarding?userId=${userId}`, {\n          method: 'GET',\n          // or 'POST', depending on how your endpoint is set up\n          headers: {\n            'Content-Type': 'application/json'\n            // Any other headers your endpoint needs\n          }\n          // If your endpoint expects a body, include it here\n        });\n\n        const data = await response.json();\n        console.log('Onboarding status updated:', data);\n      } catch (error) {\n        console.error('Failed to update onboarding status:', error);\n      }\n    };\n    updateOnboardingStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen bg-[#E0FE10] text-black text-center font-avenir text-2xl\",\n    children: \"You have completed your Stripe Onboarding! \\uD83C\\uDF89\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(CompletedOnboarding, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n_c = CompletedOnboarding;\nexport default CompletedOnboarding;\nvar _c;\n$RefreshReg$(_c, \"CompletedOnboarding\");","map":{"version":3,"names":["React","useEffect","useLocation","jsxDEV","_jsxDEV","CompletedOnboarding","_s","location","queryParams","URLSearchParams","search","userId","get","updateOnboardingStatus","response","fetch","method","headers","data","json","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tre/Documents/GitHub/QuickLifts-web/src/pages/CompletedOnboarding.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; // This assumes you're using react-router-dom\n\nconst CompletedOnboarding = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    // Extract the userId from the URL query parameters\n    const queryParams = new URLSearchParams(location.search);\n    const userId = queryParams.get('userId');\n    \n    // Function to call the endpoint that updates the onboarding status\n    const updateOnboardingStatus = async () => {\n      try {\n        // Extract userId from URL or store it in a way you can retrieve here\n        const userId = 'theUserId'; // Replace this with the actual way you get the userId\n\n        // Call the function/endpoint to update the onboarding status\n        // Replace `yourUpdateFunctionEndpoint` with your actual function's endpoint\n        const response = await fetch(`https://your-website.com/.netlify/functions/complete-stripe-onboarding?userId=${userId}`, {\n          method: 'GET', // or 'POST', depending on how your endpoint is set up\n          headers: {\n            'Content-Type': 'application/json',\n            // Any other headers your endpoint needs\n          },\n          // If your endpoint expects a body, include it here\n        });\n\n        const data = await response.json();\n        console.log('Onboarding status updated:', data);\n      } catch (error) {\n        console.error('Failed to update onboarding status:', error);\n      }\n    };\n\n    updateOnboardingStatus();\n  }, []);\n  return (\n    <div className=\"flex justify-center items-center h-screen bg-[#E0FE10] text-black text-center font-avenir text-2xl\">\n      You have completed your Stripe Onboarding! ðŸŽ‰\n    </div>\n  );\n};\n\nexport default CompletedOnboarding;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;IACxD,MAAMC,MAAM,GAAGH,WAAW,CAACI,GAAG,CAAC,QAAQ,CAAC;;IAExC;IACA,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACF;QACA,MAAMF,MAAM,GAAG,WAAW,CAAC,CAAC;;QAE5B;QACA;QACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,iFAAgFJ,MAAO,EAAC,EAAE;UACtHK,MAAM,EAAE,KAAK;UAAE;UACfC,OAAO,EAAE;YACP,cAAc,EAAE;YAChB;UACF;UACA;QACF,CAAC,CAAC;;QAEF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,IAAI,CAAC;MACjD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF,CAAC;IAEDT,sBAAsB,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EACN,oBACET,OAAA;IAAKmB,SAAS,EAAC,oGAAoG;IAAAC,QAAA,EAAC;EAEpH;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEV,CAAC;AAACtB,EAAA,CAvCID,mBAAmB;EAAA,QACNH,WAAW;AAAA;AAAA2B,EAAA,GADxBxB,mBAAmB;AAyCzB,eAAeA,mBAAmB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
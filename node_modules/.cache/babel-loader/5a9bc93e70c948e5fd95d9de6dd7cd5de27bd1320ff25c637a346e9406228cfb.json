{"ast":null,"code":"var _WorkoutService;\n// WorkoutService.ts\n\nimport axios from 'axios';\nimport { BodyZone } from '../types/BodyZone';\nclass WorkoutService {\n  constructor() {\n    console.log('WorkoutService instance created');\n  }\n  static get sharedInstance() {\n    if (!WorkoutService.instance) {\n      WorkoutService.instance = new WorkoutService();\n    }\n    return WorkoutService.instance;\n  }\n  async fetchSavedWorkout(userId, workoutId) {\n    console.log(`Fetching saved workout. UserID: ${userId}, WorkoutID: ${workoutId}`);\n    const baseURL = \"https://firestore.googleapis.com/v1/projects/quicklifts-dd3f1/databases/(default)/documents\";\n    const workoutURL = `${baseURL}/users/${userId}/MyCreatedWorkouts/${workoutId}`;\n    try {\n      const workoutResponse = await axios.get(workoutURL);\n      if (workoutResponse.status !== 200) {\n        console.error('Error response from server:', workoutResponse.status, workoutResponse.statusText);\n        return [null, null];\n      }\n      const workoutData = workoutResponse.data.fields;\n      const workout = this.parseWorkout(workoutData);\n\n      // Fetch exercise logs\n      const logsURL = `${baseURL}/users/${userId}/MyCreatedWorkouts/${workoutId}/logs`;\n      const logsResponse = await axios.get(logsURL);\n      if (logsResponse.status !== 200) {\n        return [workout, null];\n      }\n      const logsData = logsResponse.data.documents || [];\n      const logs = logsData.map(doc => this.parseExerciseLog(doc.fields));\n      return [workout, logs];\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        var _error$response;\n        console.error('Axios error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      }\n      return [null, null];\n    }\n  }\n  async fetchCollectionWithSweatLists(collectionId) {\n    const baseURL = \"https://firestore.googleapis.com/v1/projects/quicklifts-dd3f1/databases/(default)/documents\";\n    const collectionURL = `${baseURL}/sweatlist-collection/${collectionId}`;\n    try {\n      // Fetch the collection details\n      const collectionResponse = await axios.get(collectionURL);\n      if (collectionResponse.status !== 200) {\n        console.error('Error response from server:', collectionResponse.status, collectionResponse.statusText);\n        throw new Error('Failed to fetch collection');\n      }\n\n      // Parse collection data\n      const collectionData = collectionResponse.data.fields;\n      const collection = this.parseCollection(collectionData);\n      console.log(collection);\n\n      // Prepare to fetch sweat lists (workouts) by sweatlistIds in the collection\n      const sweatLists = [];\n      for (const sweatlistIdentifier of collection.sweatlistIds) {\n        // For each sweatlistId, fetch the saved workout (sweat list)\n        try {\n          const [workout] = await this.fetchSavedWorkout(sweatlistIdentifier.sweatlistAuthorId, sweatlistIdentifier.id); // Only care about the workout, not logs here\n          if (workout) {\n            sweatLists.push(workout);\n          }\n        } catch (error) {\n          console.error(`Error fetching workout with ID ${sweatlistIdentifier.id}:`, error);\n        }\n      }\n      return {\n        collection,\n        sweatLists\n      };\n    } catch (error) {\n      console.error('Error fetching collection with sweat lists:', error);\n      throw error;\n    }\n  }\n  parseCollection(fields) {\n    var _fields$id, _fields$title, _fields$subtitle, _fields$sweatlistIds, _fields$sweatlistIds$, _fields$ownerId, _fields$createdAt, _fields$updatedAt;\n    const id = ((_fields$id = fields.id) === null || _fields$id === void 0 ? void 0 : _fields$id.stringValue) || '';\n    const title = ((_fields$title = fields.title) === null || _fields$title === void 0 ? void 0 : _fields$title.stringValue) || '';\n    const subtitle = ((_fields$subtitle = fields.subtitle) === null || _fields$subtitle === void 0 ? void 0 : _fields$subtitle.stringValue) || '';\n\n    // Parse the sweatlistIds, assuming SweatlistIdentifiers has a specific structure\n    const sweatlistIdsArray = ((_fields$sweatlistIds = fields.sweatlistIds) === null || _fields$sweatlistIds === void 0 ? void 0 : (_fields$sweatlistIds$ = _fields$sweatlistIds.arrayValue) === null || _fields$sweatlistIds$ === void 0 ? void 0 : _fields$sweatlistIds$.values) || [];\n    const sweatlistIds = sweatlistIdsArray.map(item => {\n      var _item$mapValue, _item$mapValue$fields, _item$mapValue$fields2, _item$mapValue2, _item$mapValue2$field, _item$mapValue2$field2;\n      return {\n        id: ((_item$mapValue = item.mapValue) === null || _item$mapValue === void 0 ? void 0 : (_item$mapValue$fields = _item$mapValue.fields) === null || _item$mapValue$fields === void 0 ? void 0 : (_item$mapValue$fields2 = _item$mapValue$fields.id) === null || _item$mapValue$fields2 === void 0 ? void 0 : _item$mapValue$fields2.stringValue) || '',\n        // Adjust based on how SweatlistIdentifiers is structured\n        sweatlistAuthorId: ((_item$mapValue2 = item.mapValue) === null || _item$mapValue2 === void 0 ? void 0 : (_item$mapValue2$field = _item$mapValue2.fields) === null || _item$mapValue2$field === void 0 ? void 0 : (_item$mapValue2$field2 = _item$mapValue2$field.sweatlistAuthorId) === null || _item$mapValue2$field2 === void 0 ? void 0 : _item$mapValue2$field2.stringValue) || '' // Example fields\n      };\n    });\n    const ownerId = ((_fields$ownerId = fields.ownerId) === null || _fields$ownerId === void 0 ? void 0 : _fields$ownerId.stringValue) || '';\n    const createdAtTimestamp = parseFloat(((_fields$createdAt = fields.createdAt) === null || _fields$createdAt === void 0 ? void 0 : _fields$createdAt.doubleValue) || '0');\n    const updatedAtTimestamp = parseFloat(((_fields$updatedAt = fields.updatedAt) === null || _fields$updatedAt === void 0 ? void 0 : _fields$updatedAt.doubleValue) || '0');\n    return {\n      id,\n      title,\n      subtitle,\n      sweatlistIds,\n      ownerId,\n      createdAt: new Date(createdAtTimestamp * 1000),\n      updatedAt: new Date(updatedAtTimestamp * 1000)\n    };\n  }\n  parseWorkout(fields) {\n    var _fields$id2, _fields$title2, _fields$duration, _fields$workoutRating, _fields$isCompleted, _fields$author, _fields$createdAt2, _fields$updatedAt2, _fields$zone, _fields$exercises, _fields$exercises$arr, _fields$logs, _fields$logs$arrayVal, _fields$useAuthorCont;\n    const id = ((_fields$id2 = fields.id) === null || _fields$id2 === void 0 ? void 0 : _fields$id2.stringValue) || '';\n    const title = ((_fields$title2 = fields.title) === null || _fields$title2 === void 0 ? void 0 : _fields$title2.stringValue) || '';\n    const duration = parseInt(((_fields$duration = fields.duration) === null || _fields$duration === void 0 ? void 0 : _fields$duration.integerValue) || '0');\n    const workoutRatingRaw = ((_fields$workoutRating = fields.workoutRating) === null || _fields$workoutRating === void 0 ? void 0 : _fields$workoutRating.stringValue) || '';\n    const workoutRating = workoutRatingRaw;\n    const isCompleted = ((_fields$isCompleted = fields.isCompleted) === null || _fields$isCompleted === void 0 ? void 0 : _fields$isCompleted.booleanValue) || false;\n    const author = ((_fields$author = fields.author) === null || _fields$author === void 0 ? void 0 : _fields$author.stringValue) || '';\n    const createdAtTimestamp = parseFloat(((_fields$createdAt2 = fields.createdAt) === null || _fields$createdAt2 === void 0 ? void 0 : _fields$createdAt2.doubleValue) || '0');\n    const updatedAtTimestamp = parseFloat(((_fields$updatedAt2 = fields.updatedAt) === null || _fields$updatedAt2 === void 0 ? void 0 : _fields$updatedAt2.doubleValue) || '0');\n    const zone = ((_fields$zone = fields.zone) === null || _fields$zone === void 0 ? void 0 : _fields$zone.stringValue) || BodyZone.FullBody;\n    const exercisesArray = ((_fields$exercises = fields.exercises) === null || _fields$exercises === void 0 ? void 0 : (_fields$exercises$arr = _fields$exercises.arrayValue) === null || _fields$exercises$arr === void 0 ? void 0 : _fields$exercises$arr.values) || [];\n    const exercises = exercisesArray.map(exerciseData => {\n      var _exerciseData$mapValu, _exerciseData$mapValu2, _exerciseData$mapValu3, _exerciseData$mapValu4, _exerciseData$mapValu5, _exerciseData$mapValu6, _exerciseData$mapValu7;\n      const exerciseFields = ((_exerciseData$mapValu = exerciseData.mapValue) === null || _exerciseData$mapValu === void 0 ? void 0 : (_exerciseData$mapValu2 = _exerciseData$mapValu.fields) === null || _exerciseData$mapValu2 === void 0 ? void 0 : (_exerciseData$mapValu3 = _exerciseData$mapValu2.exercise) === null || _exerciseData$mapValu3 === void 0 ? void 0 : (_exerciseData$mapValu4 = _exerciseData$mapValu3.mapValue) === null || _exerciseData$mapValu4 === void 0 ? void 0 : _exerciseData$mapValu4.fields) || {};\n      return {\n        exercise: this.parseExercise(exerciseFields),\n        groupId: parseInt(((_exerciseData$mapValu5 = exerciseData.mapValue) === null || _exerciseData$mapValu5 === void 0 ? void 0 : (_exerciseData$mapValu6 = _exerciseData$mapValu5.fields) === null || _exerciseData$mapValu6 === void 0 ? void 0 : (_exerciseData$mapValu7 = _exerciseData$mapValu6.groupId) === null || _exerciseData$mapValu7 === void 0 ? void 0 : _exerciseData$mapValu7.integerValue) || '0')\n      };\n    });\n    const logsArray = ((_fields$logs = fields.logs) === null || _fields$logs === void 0 ? void 0 : (_fields$logs$arrayVal = _fields$logs.arrayValue) === null || _fields$logs$arrayVal === void 0 ? void 0 : _fields$logs$arrayVal.values) || [];\n    const logs = logsArray.map(logData => {\n      var _logData$mapValue;\n      return this.parseExerciseLog(((_logData$mapValue = logData.mapValue) === null || _logData$mapValue === void 0 ? void 0 : _logData$mapValue.fields) || {});\n    });\n    return {\n      id,\n      exercises,\n      logs,\n      title,\n      duration,\n      workoutRating,\n      useAuthorContent: ((_fields$useAuthorCont = fields.useAuthorContent) === null || _fields$useAuthorCont === void 0 ? void 0 : _fields$useAuthorCont.booleanValue) || false,\n      isCompleted,\n      author,\n      createdAt: new Date(createdAtTimestamp * 1000),\n      updatedAt: new Date(updatedAtTimestamp * 1000),\n      zone,\n      estimatedDuration: () => {\n        // Implement this method based on your Swift logic\n        return 0;\n      },\n      determineWorkoutZone: () => {\n        // Implement this method based on your Swift logic\n        return BodyZone.FullBody;\n      },\n      toDictionary: () => {\n        // Implement this method if needed\n        return {};\n      }\n    };\n  }\n  parseExerciseLog(fields) {\n    var _fields$id3, _fields$workoutId, _fields$userId, _fields$feedback, _fields$note, _fields$recommendedWe, _fields$isSplit, _fields$isBodyWeight, _fields$logSubmitted, _fields$logIsEditing, _fields$createdAt3, _fields$updatedAt3, _fields$exercise, _fields$exercise$mapV, _fields$log, _fields$log$arrayValu;\n    const id = ((_fields$id3 = fields.id) === null || _fields$id3 === void 0 ? void 0 : _fields$id3.stringValue) || '';\n    const workoutId = ((_fields$workoutId = fields.workoutId) === null || _fields$workoutId === void 0 ? void 0 : _fields$workoutId.stringValue) || '';\n    const userId = ((_fields$userId = fields.userId) === null || _fields$userId === void 0 ? void 0 : _fields$userId.stringValue) || '';\n    const feedback = ((_fields$feedback = fields.feedback) === null || _fields$feedback === void 0 ? void 0 : _fields$feedback.stringValue) || '';\n    const note = ((_fields$note = fields.note) === null || _fields$note === void 0 ? void 0 : _fields$note.stringValue) || '';\n    const recommendedWeight = (_fields$recommendedWe = fields.recommendedWeight) === null || _fields$recommendedWe === void 0 ? void 0 : _fields$recommendedWe.stringValue;\n    const isSplit = ((_fields$isSplit = fields.isSplit) === null || _fields$isSplit === void 0 ? void 0 : _fields$isSplit.booleanValue) || false;\n    const isBodyWeight = ((_fields$isBodyWeight = fields.isBodyWeight) === null || _fields$isBodyWeight === void 0 ? void 0 : _fields$isBodyWeight.booleanValue) || false;\n    const logSubmitted = ((_fields$logSubmitted = fields.logSubmitted) === null || _fields$logSubmitted === void 0 ? void 0 : _fields$logSubmitted.booleanValue) || false;\n    const logIsEditing = ((_fields$logIsEditing = fields.logIsEditing) === null || _fields$logIsEditing === void 0 ? void 0 : _fields$logIsEditing.booleanValue) || false;\n    const createdAtTimestamp = parseFloat(((_fields$createdAt3 = fields.createdAt) === null || _fields$createdAt3 === void 0 ? void 0 : _fields$createdAt3.doubleValue) || '0');\n    const updatedAtTimestamp = parseFloat(((_fields$updatedAt3 = fields.updatedAt) === null || _fields$updatedAt3 === void 0 ? void 0 : _fields$updatedAt3.doubleValue) || '0');\n    const exercise = this.parseExercise(((_fields$exercise = fields.exercise) === null || _fields$exercise === void 0 ? void 0 : (_fields$exercise$mapV = _fields$exercise.mapValue) === null || _fields$exercise$mapV === void 0 ? void 0 : _fields$exercise$mapV.fields) || {});\n    const logsArray = ((_fields$log = fields.log) === null || _fields$log === void 0 ? void 0 : (_fields$log$arrayValu = _fields$log.arrayValue) === null || _fields$log$arrayValu === void 0 ? void 0 : _fields$log$arrayValu.values) || [];\n    const logs = logsArray.map(logData => {\n      var _logData$mapValue2, _logFields$reps, _logFields$weight, _logFields$leftReps, _logFields$leftWeight, _logFields$isSplit, _logFields$isBodyWeig, _logFields$duration, _logFields$calories, _logFields$bpm;\n      const logFields = ((_logData$mapValue2 = logData.mapValue) === null || _logData$mapValue2 === void 0 ? void 0 : _logData$mapValue2.fields) || {};\n      return {\n        reps: parseInt(((_logFields$reps = logFields.reps) === null || _logFields$reps === void 0 ? void 0 : _logFields$reps.integerValue) || '0'),\n        weight: parseFloat(((_logFields$weight = logFields.weight) === null || _logFields$weight === void 0 ? void 0 : _logFields$weight.doubleValue) || '0'),\n        leftReps: parseInt(((_logFields$leftReps = logFields.leftReps) === null || _logFields$leftReps === void 0 ? void 0 : _logFields$leftReps.integerValue) || '0'),\n        leftWeight: parseFloat(((_logFields$leftWeight = logFields.leftWeight) === null || _logFields$leftWeight === void 0 ? void 0 : _logFields$leftWeight.doubleValue) || '0'),\n        isSplit: ((_logFields$isSplit = logFields.isSplit) === null || _logFields$isSplit === void 0 ? void 0 : _logFields$isSplit.booleanValue) || false,\n        isBodyWeight: ((_logFields$isBodyWeig = logFields.isBodyWeight) === null || _logFields$isBodyWeig === void 0 ? void 0 : _logFields$isBodyWeig.booleanValue) || false,\n        duration: parseInt(((_logFields$duration = logFields.duration) === null || _logFields$duration === void 0 ? void 0 : _logFields$duration.integerValue) || '0'),\n        calories: parseInt(((_logFields$calories = logFields.calories) === null || _logFields$calories === void 0 ? void 0 : _logFields$calories.integerValue) || '0'),\n        bpm: parseInt(((_logFields$bpm = logFields.bpm) === null || _logFields$bpm === void 0 ? void 0 : _logFields$bpm.integerValue) || '0')\n      };\n    });\n    return {\n      id,\n      workoutId,\n      userId,\n      exercise,\n      logs,\n      feedback,\n      note,\n      recommendedWeight,\n      isSplit,\n      isBodyWeight,\n      logSubmitted,\n      logIsEditing,\n      createdAt: new Date(createdAtTimestamp * 1000),\n      updatedAt: new Date(updatedAtTimestamp * 1000)\n    };\n  }\n  parseExercise(fields) {\n    var _fields$id4, _fields$name, _fields$category, _fields$category$mapV, _fields$tags, _fields$tags$arrayVal, _fields$tags$arrayVal2, _fields$description, _fields$visibility, _fields$visibility$ar, _fields$visibility$ar2, _fields$steps, _fields$steps$arrayVa, _fields$steps$arrayVa2, _fields$currentVideoP, _fields$reps, _fields$sets, _fields$weight, _fields$author2, _fields$author2$mapVa, _fields$createdAt4, _fields$updatedAt4;\n    // Implement this method based on your Swift parseExercise function\n    // This is a simplified version, you may need to add more details\n    return {\n      id: ((_fields$id4 = fields.id) === null || _fields$id4 === void 0 ? void 0 : _fields$id4.stringValue) || '',\n      name: ((_fields$name = fields.name) === null || _fields$name === void 0 ? void 0 : _fields$name.stringValue) || '',\n      category: this.parseExerciseCategory(((_fields$category = fields.category) === null || _fields$category === void 0 ? void 0 : (_fields$category$mapV = _fields$category.mapValue) === null || _fields$category$mapV === void 0 ? void 0 : _fields$category$mapV.fields) || {}),\n      primaryBodyParts: this.parseBodyParts(fields.primaryBodyParts),\n      secondaryBodyParts: this.parseBodyParts(fields.secondaryBodyParts),\n      tags: ((_fields$tags = fields.tags) === null || _fields$tags === void 0 ? void 0 : (_fields$tags$arrayVal = _fields$tags.arrayValue) === null || _fields$tags$arrayVal === void 0 ? void 0 : (_fields$tags$arrayVal2 = _fields$tags$arrayVal.values) === null || _fields$tags$arrayVal2 === void 0 ? void 0 : _fields$tags$arrayVal2.map(tag => tag.stringValue)) || [],\n      description: ((_fields$description = fields.description) === null || _fields$description === void 0 ? void 0 : _fields$description.stringValue) || '',\n      visibility: ((_fields$visibility = fields.visibility) === null || _fields$visibility === void 0 ? void 0 : (_fields$visibility$ar = _fields$visibility.arrayValue) === null || _fields$visibility$ar === void 0 ? void 0 : (_fields$visibility$ar2 = _fields$visibility$ar.values) === null || _fields$visibility$ar2 === void 0 ? void 0 : _fields$visibility$ar2.map(v => v.stringValue)) || [],\n      steps: ((_fields$steps = fields.steps) === null || _fields$steps === void 0 ? void 0 : (_fields$steps$arrayVa = _fields$steps.arrayValue) === null || _fields$steps$arrayVa === void 0 ? void 0 : (_fields$steps$arrayVa2 = _fields$steps$arrayVa.values) === null || _fields$steps$arrayVa2 === void 0 ? void 0 : _fields$steps$arrayVa2.map(step => step.stringValue)) || [],\n      videos: this.parseVideos(fields.videos),\n      currentVideoPosition: parseInt(((_fields$currentVideoP = fields.currentVideoPosition) === null || _fields$currentVideoP === void 0 ? void 0 : _fields$currentVideoP.integerValue) || '0'),\n      reps: ((_fields$reps = fields.reps) === null || _fields$reps === void 0 ? void 0 : _fields$reps.stringValue) || '',\n      sets: parseInt(((_fields$sets = fields.sets) === null || _fields$sets === void 0 ? void 0 : _fields$sets.integerValue) || '0'),\n      weight: parseFloat(((_fields$weight = fields.weight) === null || _fields$weight === void 0 ? void 0 : _fields$weight.doubleValue) || '0'),\n      author: this.parseExerciseAuthor(((_fields$author2 = fields.author) === null || _fields$author2 === void 0 ? void 0 : (_fields$author2$mapVa = _fields$author2.mapValue) === null || _fields$author2$mapVa === void 0 ? void 0 : _fields$author2$mapVa.fields) || {}),\n      createdAt: new Date(parseFloat(((_fields$createdAt4 = fields.createdAt) === null || _fields$createdAt4 === void 0 ? void 0 : _fields$createdAt4.doubleValue) || '0') * 1000),\n      updatedAt: new Date(parseFloat(((_fields$updatedAt4 = fields.updatedAt) === null || _fields$updatedAt4 === void 0 ? void 0 : _fields$updatedAt4.doubleValue) || '0') * 1000)\n    };\n  }\n  parseExerciseCategory(fields) {\n    var _fields$id5;\n    const categoryId = ((_fields$id5 = fields.id) === null || _fields$id5 === void 0 ? void 0 : _fields$id5.stringValue) || '';\n    if (categoryId === 'cardio') {\n      var _fields$duration2, _fields$bpm, _fields$calories;\n      return {\n        type: 'cardio',\n        details: {\n          duration: parseInt(((_fields$duration2 = fields.duration) === null || _fields$duration2 === void 0 ? void 0 : _fields$duration2.integerValue) || '0'),\n          bpm: parseInt(((_fields$bpm = fields.bpm) === null || _fields$bpm === void 0 ? void 0 : _fields$bpm.integerValue) || '0'),\n          calories: parseInt(((_fields$calories = fields.calories) === null || _fields$calories === void 0 ? void 0 : _fields$calories.integerValue) || '0')\n        }\n      };\n    } else {\n      var _fields$reps2, _fields$sets2, _fields$weight2;\n      return {\n        type: 'weightTraining',\n        details: {\n          reps: ((_fields$reps2 = fields.reps) === null || _fields$reps2 === void 0 ? void 0 : _fields$reps2.stringValue) || '',\n          sets: parseInt(((_fields$sets2 = fields.sets) === null || _fields$sets2 === void 0 ? void 0 : _fields$sets2.integerValue) || '0'),\n          weight: parseFloat(((_fields$weight2 = fields.weight) === null || _fields$weight2 === void 0 ? void 0 : _fields$weight2.doubleValue) || '0')\n        }\n      };\n    }\n  }\n  parseBodyParts(bodyPartsField) {\n    var _bodyPartsField$array;\n    const bodyPartsArray = (bodyPartsField === null || bodyPartsField === void 0 ? void 0 : (_bodyPartsField$array = bodyPartsField.arrayValue) === null || _bodyPartsField$array === void 0 ? void 0 : _bodyPartsField$array.values) || [];\n    return bodyPartsArray.map(part => part.stringValue);\n  }\n  parseVideos(videosField) {\n    var _videosField$arrayVal;\n    const videosArray = (videosField === null || videosField === void 0 ? void 0 : (_videosField$arrayVal = videosField.arrayValue) === null || _videosField$arrayVal === void 0 ? void 0 : _videosField$arrayVal.values) || [];\n    return videosArray.map(videoData => {\n      var _videoData$mapValue;\n      return this.parseExerciseVideo(((_videoData$mapValue = videoData.mapValue) === null || _videoData$mapValue === void 0 ? void 0 : _videoData$mapValue.fields) || {});\n    });\n  }\n  parseExerciseVideo(fields) {\n    var _fields$id6, _fields$exerciseId, _fields$username, _fields$userId2, _fields$videoURL, _fields$fileName, _fields$exercise2, _fields$profileImage, _fields$profileImage$, _fields$caption, _fields$gifURL, _fields$thumbnail, _fields$visibility2, _fields$totalAccounts, _fields$totalAccountL, _fields$totalAccountB, _fields$totalAccountU, _fields$isApproved, _fields$liked, _fields$bookmarked, _fields$createdAt5, _fields$updatedAt5;\n    return {\n      id: ((_fields$id6 = fields.id) === null || _fields$id6 === void 0 ? void 0 : _fields$id6.stringValue) || '',\n      exerciseId: ((_fields$exerciseId = fields.exerciseId) === null || _fields$exerciseId === void 0 ? void 0 : _fields$exerciseId.stringValue) || '',\n      username: ((_fields$username = fields.username) === null || _fields$username === void 0 ? void 0 : _fields$username.stringValue) || '',\n      userId: ((_fields$userId2 = fields.userId) === null || _fields$userId2 === void 0 ? void 0 : _fields$userId2.stringValue) || '',\n      videoURL: ((_fields$videoURL = fields.videoURL) === null || _fields$videoURL === void 0 ? void 0 : _fields$videoURL.stringValue) || '',\n      fileName: ((_fields$fileName = fields.fileName) === null || _fields$fileName === void 0 ? void 0 : _fields$fileName.stringValue) || '',\n      exercise: ((_fields$exercise2 = fields.exercise) === null || _fields$exercise2 === void 0 ? void 0 : _fields$exercise2.stringValue) || '',\n      profileImage: this.parseProfileImage(((_fields$profileImage = fields.profileImage) === null || _fields$profileImage === void 0 ? void 0 : (_fields$profileImage$ = _fields$profileImage.mapValue) === null || _fields$profileImage$ === void 0 ? void 0 : _fields$profileImage$.fields) || {}),\n      caption: ((_fields$caption = fields.caption) === null || _fields$caption === void 0 ? void 0 : _fields$caption.stringValue) || '',\n      gifURL: ((_fields$gifURL = fields.gifURL) === null || _fields$gifURL === void 0 ? void 0 : _fields$gifURL.stringValue) || '',\n      thumbnail: ((_fields$thumbnail = fields.thumbnail) === null || _fields$thumbnail === void 0 ? void 0 : _fields$thumbnail.stringValue) || '',\n      visibility: ((_fields$visibility2 = fields.visibility) === null || _fields$visibility2 === void 0 ? void 0 : _fields$visibility2.stringValue) || 'open',\n      totalAccountsReached: parseInt(((_fields$totalAccounts = fields.totalAccountsReached) === null || _fields$totalAccounts === void 0 ? void 0 : _fields$totalAccounts.integerValue) || '0'),\n      totalAccountLikes: parseInt(((_fields$totalAccountL = fields.totalAccountLikes) === null || _fields$totalAccountL === void 0 ? void 0 : _fields$totalAccountL.integerValue) || '0'),\n      totalAccountBookmarked: parseInt(((_fields$totalAccountB = fields.totalAccountBookmarked) === null || _fields$totalAccountB === void 0 ? void 0 : _fields$totalAccountB.integerValue) || '0'),\n      totalAccountUsage: parseInt(((_fields$totalAccountU = fields.totalAccountUsage) === null || _fields$totalAccountU === void 0 ? void 0 : _fields$totalAccountU.integerValue) || '0'),\n      comments: this.parseComments(fields.comments),\n      isApproved: ((_fields$isApproved = fields.isApproved) === null || _fields$isApproved === void 0 ? void 0 : _fields$isApproved.booleanValue) || false,\n      liked: (_fields$liked = fields.liked) === null || _fields$liked === void 0 ? void 0 : _fields$liked.booleanValue,\n      bookmarked: (_fields$bookmarked = fields.bookmarked) === null || _fields$bookmarked === void 0 ? void 0 : _fields$bookmarked.booleanValue,\n      createdAt: new Date(parseFloat(((_fields$createdAt5 = fields.createdAt) === null || _fields$createdAt5 === void 0 ? void 0 : _fields$createdAt5.doubleValue) || '0') * 1000),\n      updatedAt: new Date(parseFloat(((_fields$updatedAt5 = fields.updatedAt) === null || _fields$updatedAt5 === void 0 ? void 0 : _fields$updatedAt5.doubleValue) || '0') * 1000)\n    };\n  }\n  parseProfileImage(fields) {\n    var _fields$profileImageU, _fields$imageOffsetWi, _fields$imageOffsetHe;\n    return {\n      profileImageURL: ((_fields$profileImageU = fields.profileImageURL) === null || _fields$profileImageU === void 0 ? void 0 : _fields$profileImageU.stringValue) || '',\n      imageOffsetWidth: parseFloat(((_fields$imageOffsetWi = fields.imageOffsetWidth) === null || _fields$imageOffsetWi === void 0 ? void 0 : _fields$imageOffsetWi.doubleValue) || '0'),\n      imageOffsetHeight: parseFloat(((_fields$imageOffsetHe = fields.imageOffsetHeight) === null || _fields$imageOffsetHe === void 0 ? void 0 : _fields$imageOffsetHe.doubleValue) || '0')\n    };\n  }\n  parseComments(commentsField) {\n    var _commentsField$arrayV;\n    const commentsArray = (commentsField === null || commentsField === void 0 ? void 0 : (_commentsField$arrayV = commentsField.arrayValue) === null || _commentsField$arrayV === void 0 ? void 0 : _commentsField$arrayV.values) || [];\n    return commentsArray.map(commentData => {\n      var _commentData$mapValue;\n      return this.parseComment(((_commentData$mapValue = commentData.mapValue) === null || _commentData$mapValue === void 0 ? void 0 : _commentData$mapValue.fields) || {});\n    });\n  }\n  parseComment(fields) {\n    var _fields$id7, _fields$username2, _fields$text, _fields$createdAt6, _fields$updatedAt6;\n    return {\n      id: ((_fields$id7 = fields.id) === null || _fields$id7 === void 0 ? void 0 : _fields$id7.stringValue) || '',\n      username: ((_fields$username2 = fields.username) === null || _fields$username2 === void 0 ? void 0 : _fields$username2.stringValue) || '',\n      text: ((_fields$text = fields.text) === null || _fields$text === void 0 ? void 0 : _fields$text.stringValue) || '',\n      createdAt: new Date(parseFloat(((_fields$createdAt6 = fields.createdAt) === null || _fields$createdAt6 === void 0 ? void 0 : _fields$createdAt6.doubleValue) || '0') * 1000),\n      updatedAt: new Date(parseFloat(((_fields$updatedAt6 = fields.updatedAt) === null || _fields$updatedAt6 === void 0 ? void 0 : _fields$updatedAt6.doubleValue) || '0') * 1000)\n    };\n  }\n  parseExerciseAuthor(fields) {\n    var _fields$userId3, _fields$username3;\n    return {\n      userId: ((_fields$userId3 = fields.userId) === null || _fields$userId3 === void 0 ? void 0 : _fields$userId3.stringValue) || '',\n      username: ((_fields$username3 = fields.username) === null || _fields$username3 === void 0 ? void 0 : _fields$username3.stringValue) || ''\n    };\n  }\n}\n_WorkoutService = WorkoutService;\nWorkoutService.instance = void 0;\nexport default WorkoutService;","map":{"version":3,"names":["axios","BodyZone","WorkoutService","constructor","console","log","sharedInstance","instance","fetchSavedWorkout","userId","workoutId","baseURL","workoutURL","workoutResponse","get","status","error","statusText","workoutData","data","fields","workout","parseWorkout","logsURL","logsResponse","logsData","documents","logs","map","doc","parseExerciseLog","isAxiosError","_error$response","response","fetchCollectionWithSweatLists","collectionId","collectionURL","collectionResponse","Error","collectionData","collection","parseCollection","sweatLists","sweatlistIdentifier","sweatlistIds","sweatlistAuthorId","id","push","_fields$id","_fields$title","_fields$subtitle","_fields$sweatlistIds","_fields$sweatlistIds$","_fields$ownerId","_fields$createdAt","_fields$updatedAt","stringValue","title","subtitle","sweatlistIdsArray","arrayValue","values","item","_item$mapValue","_item$mapValue$fields","_item$mapValue$fields2","_item$mapValue2","_item$mapValue2$field","_item$mapValue2$field2","mapValue","ownerId","createdAtTimestamp","parseFloat","createdAt","doubleValue","updatedAtTimestamp","updatedAt","Date","_fields$id2","_fields$title2","_fields$duration","_fields$workoutRating","_fields$isCompleted","_fields$author","_fields$createdAt2","_fields$updatedAt2","_fields$zone","_fields$exercises","_fields$exercises$arr","_fields$logs","_fields$logs$arrayVal","_fields$useAuthorCont","duration","parseInt","integerValue","workoutRatingRaw","workoutRating","isCompleted","booleanValue","author","zone","FullBody","exercisesArray","exercises","exerciseData","_exerciseData$mapValu","_exerciseData$mapValu2","_exerciseData$mapValu3","_exerciseData$mapValu4","_exerciseData$mapValu5","_exerciseData$mapValu6","_exerciseData$mapValu7","exerciseFields","exercise","parseExercise","groupId","logsArray","logData","_logData$mapValue","useAuthorContent","estimatedDuration","determineWorkoutZone","toDictionary","_fields$id3","_fields$workoutId","_fields$userId","_fields$feedback","_fields$note","_fields$recommendedWe","_fields$isSplit","_fields$isBodyWeight","_fields$logSubmitted","_fields$logIsEditing","_fields$createdAt3","_fields$updatedAt3","_fields$exercise","_fields$exercise$mapV","_fields$log","_fields$log$arrayValu","feedback","note","recommendedWeight","isSplit","isBodyWeight","logSubmitted","logIsEditing","_logData$mapValue2","_logFields$reps","_logFields$weight","_logFields$leftReps","_logFields$leftWeight","_logFields$isSplit","_logFields$isBodyWeig","_logFields$duration","_logFields$calories","_logFields$bpm","logFields","reps","weight","leftReps","leftWeight","calories","bpm","_fields$id4","_fields$name","_fields$category","_fields$category$mapV","_fields$tags","_fields$tags$arrayVal","_fields$tags$arrayVal2","_fields$description","_fields$visibility","_fields$visibility$ar","_fields$visibility$ar2","_fields$steps","_fields$steps$arrayVa","_fields$steps$arrayVa2","_fields$currentVideoP","_fields$reps","_fields$sets","_fields$weight","_fields$author2","_fields$author2$mapVa","_fields$createdAt4","_fields$updatedAt4","name","category","parseExerciseCategory","primaryBodyParts","parseBodyParts","secondaryBodyParts","tags","tag","description","visibility","v","steps","step","videos","parseVideos","currentVideoPosition","sets","parseExerciseAuthor","_fields$id5","categoryId","_fields$duration2","_fields$bpm","_fields$calories","type","details","_fields$reps2","_fields$sets2","_fields$weight2","bodyPartsField","_bodyPartsField$array","bodyPartsArray","part","videosField","_videosField$arrayVal","videosArray","videoData","_videoData$mapValue","parseExerciseVideo","_fields$id6","_fields$exerciseId","_fields$username","_fields$userId2","_fields$videoURL","_fields$fileName","_fields$exercise2","_fields$profileImage","_fields$profileImage$","_fields$caption","_fields$gifURL","_fields$thumbnail","_fields$visibility2","_fields$totalAccounts","_fields$totalAccountL","_fields$totalAccountB","_fields$totalAccountU","_fields$isApproved","_fields$liked","_fields$bookmarked","_fields$createdAt5","_fields$updatedAt5","exerciseId","username","videoURL","fileName","profileImage","parseProfileImage","caption","gifURL","thumbnail","totalAccountsReached","totalAccountLikes","totalAccountBookmarked","totalAccountUsage","comments","parseComments","isApproved","liked","bookmarked","_fields$profileImageU","_fields$imageOffsetWi","_fields$imageOffsetHe","profileImageURL","imageOffsetWidth","imageOffsetHeight","commentsField","_commentsField$arrayV","commentsArray","commentData","_commentData$mapValue","parseComment","_fields$id7","_fields$username2","_fields$text","_fields$createdAt6","_fields$updatedAt6","text","_fields$userId3","_fields$username3","_WorkoutService"],"sources":["/Users/tre/Documents/GitHub/QuickLifts-web/src/services/WorkoutService.tsx"],"sourcesContent":["// WorkoutService.ts\n\nimport axios from 'axios';\nimport { Workout } from '../types/Workout';\nimport { ExerciseLog } from '../types/ExerciseLog';\nimport { ExerciseVideo } from '../types/ExerciseVideo';\nimport { BodyZone } from '../types/BodyZone';\nimport { ExerciseReference } from '../types/ExerciseReference';\nimport { Exercise } from '../types/Exercise';\nimport { RepsAndWeightLog } from '../types/RepsAndWeightLog';\nimport { WorkoutRating } from '../types/Workout';\nimport { ExerciseCategory } from '../types/ExerciseCategory';\nimport { ExerciseAuthor } from '../types/ExerciseAuthor';\nimport { BodyPart } from '../types/BodyPart';\nimport { ProfileImage } from '../types/ProfileImage';\nimport { ExerciseComment } from '../types/ExerciseComment';\nimport { SweatlistCollection } from '../types/SweatlistCollection';\nimport { SweatlistIdentifiers } from '../types/SweatlistIdentifiers';\n\nclass WorkoutService {\n  private static instance: WorkoutService;\n\n  private constructor() {\n    console.log('WorkoutService instance created');\n  }\n\n  public static get sharedInstance(): WorkoutService {\n    if (!WorkoutService.instance) {\n      WorkoutService.instance = new WorkoutService();\n    }\n    return WorkoutService.instance;\n  }\n\n  public async fetchSavedWorkout(userId: string, workoutId: string): Promise<[Workout | null, ExerciseLog[] | null]> {\n    console.log(`Fetching saved workout. UserID: ${userId}, WorkoutID: ${workoutId}`);\n    \n    const baseURL = \"https://firestore.googleapis.com/v1/projects/quicklifts-dd3f1/databases/(default)/documents\";\n    const workoutURL = `${baseURL}/users/${userId}/MyCreatedWorkouts/${workoutId}`;\n    \n    try {\n      const workoutResponse = await axios.get(workoutURL);\n      \n      if (workoutResponse.status !== 200) {\n        console.error('Error response from server:', workoutResponse.status, workoutResponse.statusText);\n        return [null, null];\n      }\n\n      const workoutData = workoutResponse.data.fields;\n\n      const workout = this.parseWorkout(workoutData);\n\n      // Fetch exercise logs\n      const logsURL = `${baseURL}/users/${userId}/MyCreatedWorkouts/${workoutId}/logs`;\n      const logsResponse = await axios.get(logsURL);\n\n      if (logsResponse.status !== 200) {\n        return [workout, null];\n      }\n\n      const logsData = logsResponse.data.documents || [];\n\n      const logs = logsData.map((doc: any) => this.parseExerciseLog(doc.fields));\n\n      return [workout, logs];\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        console.error('Axios error details:', error.response?.data);\n      }\n      return [null, null];\n    }\n  }\n\n  public async fetchCollectionWithSweatLists(collectionId: string): Promise<{ collection: any, sweatLists: any[] }> {    \n    const baseURL = \"https://firestore.googleapis.com/v1/projects/quicklifts-dd3f1/databases/(default)/documents\";\n    const collectionURL = `${baseURL}/sweatlist-collection/${collectionId}`;\n    \n    try {\n      // Fetch the collection details\n      const collectionResponse = await axios.get(collectionURL);\n      \n      if (collectionResponse.status !== 200) {\n        console.error('Error response from server:', collectionResponse.status, collectionResponse.statusText);\n        throw new Error('Failed to fetch collection');\n      }\n  \n      // Parse collection data\n      const collectionData = collectionResponse.data.fields;\n\n      const collection = this.parseCollection(collectionData);\n      console.log(collection)\n  \n      // Prepare to fetch sweat lists (workouts) by sweatlistIds in the collection\n      const sweatLists: Workout[] = [];\n      for (const sweatlistIdentifier of collection.sweatlistIds) {\n        // For each sweatlistId, fetch the saved workout (sweat list)\n        try {\n          const [workout] = await this.fetchSavedWorkout(sweatlistIdentifier.sweatlistAuthorId, sweatlistIdentifier.id); // Only care about the workout, not logs here\n          if (workout) {\n            sweatLists.push(workout);\n          }\n        } catch (error) {\n          console.error(`Error fetching workout with ID ${sweatlistIdentifier.id}:`, error);\n        }\n      }\n  \n      return { collection, sweatLists };\n  \n    } catch (error) {\n      console.error('Error fetching collection with sweat lists:', error);\n      throw error;\n    }\n  }\n  \n  private parseCollection(fields: any): SweatlistCollection {\n    const id = fields.id?.stringValue || '';\n    const title = fields.title?.stringValue || '';\n    const subtitle = fields.subtitle?.stringValue || '';\n  \n    // Parse the sweatlistIds, assuming SweatlistIdentifiers has a specific structure\n    const sweatlistIdsArray = fields.sweatlistIds?.arrayValue?.values || [];\n    const sweatlistIds: SweatlistIdentifiers[] = sweatlistIdsArray.map((item: any) => ({\n      id: item.mapValue?.fields?.id?.stringValue || '', // Adjust based on how SweatlistIdentifiers is structured\n      sweatlistAuthorId: item.mapValue?.fields?.sweatlistAuthorId?.stringValue || '', // Example fields\n    }));\n  \n    const ownerId = fields.ownerId?.stringValue || '';\n    const createdAtTimestamp = parseFloat(fields.createdAt?.doubleValue || '0');\n    const updatedAtTimestamp = parseFloat(fields.updatedAt?.doubleValue || '0');\n  \n    return {\n      id,\n      title,\n      subtitle,\n      sweatlistIds,\n      ownerId,\n      createdAt: new Date(createdAtTimestamp * 1000),\n      updatedAt: new Date(updatedAtTimestamp * 1000),\n    };\n  }\n  \n  private parseWorkout(fields: any): Workout {\n    const id = fields.id?.stringValue || '';\n    const title = fields.title?.stringValue || '';\n    const duration = parseInt(fields.duration?.integerValue || '0');\n    const workoutRatingRaw = fields.workoutRating?.stringValue || '';\n    const workoutRating = workoutRatingRaw as WorkoutRating;\n    const isCompleted = fields.isCompleted?.booleanValue || false;\n    const author = fields.author?.stringValue || '';\n    const createdAtTimestamp = parseFloat(fields.createdAt?.doubleValue || '0');\n    const updatedAtTimestamp = parseFloat(fields.updatedAt?.doubleValue || '0');\n    const zone = fields.zone?.stringValue as BodyZone || BodyZone.FullBody;\n\n    const exercisesArray = fields.exercises?.arrayValue?.values || [];\n    const exercises: ExerciseReference[] = exercisesArray.map((exerciseData: any) => {\n      const exerciseFields = exerciseData.mapValue?.fields?.exercise?.mapValue?.fields || {};\n      return {\n        exercise: this.parseExercise(exerciseFields),\n        groupId: parseInt(exerciseData.mapValue?.fields?.groupId?.integerValue || '0')\n      };\n    });\n\n    const logsArray = fields.logs?.arrayValue?.values || [];\n    const logs: ExerciseLog[] = logsArray.map((logData: any) => {\n      return this.parseExerciseLog(logData.mapValue?.fields || {});\n    });\n\n    return {\n      id,\n      exercises,\n      logs,\n      title,\n      duration,\n      workoutRating,\n      useAuthorContent: fields.useAuthorContent?.booleanValue || false,\n      isCompleted,\n      author,\n      createdAt: new Date(createdAtTimestamp * 1000),\n      updatedAt: new Date(updatedAtTimestamp * 1000),\n      zone,\n      estimatedDuration: () => {\n        // Implement this method based on your Swift logic\n        return 0;\n      },\n      determineWorkoutZone: () => {\n        // Implement this method based on your Swift logic\n        return BodyZone.FullBody;\n      },\n      toDictionary: () => {\n        // Implement this method if needed\n        return {};\n      }\n    };\n  }\n\n  private parseExerciseLog(fields: any): ExerciseLog {\n    const id = fields.id?.stringValue || '';\n    const workoutId = fields.workoutId?.stringValue || '';\n    const userId = fields.userId?.stringValue || '';\n    const feedback = fields.feedback?.stringValue || '';\n    const note = fields.note?.stringValue || '';\n    const recommendedWeight = fields.recommendedWeight?.stringValue;\n    const isSplit = fields.isSplit?.booleanValue || false;\n    const isBodyWeight = fields.isBodyWeight?.booleanValue || false;\n    const logSubmitted = fields.logSubmitted?.booleanValue || false;\n    const logIsEditing = fields.logIsEditing?.booleanValue || false;\n    const createdAtTimestamp = parseFloat(fields.createdAt?.doubleValue || '0');\n    const updatedAtTimestamp = parseFloat(fields.updatedAt?.doubleValue || '0');\n\n    const exercise = this.parseExercise(fields.exercise?.mapValue?.fields || {});\n\n    const logsArray = fields.log?.arrayValue?.values || [];\n    const logs: RepsAndWeightLog[] = logsArray.map((logData: any) => {\n      const logFields = logData.mapValue?.fields || {};\n      return {\n        reps: parseInt(logFields.reps?.integerValue || '0'),\n        weight: parseFloat(logFields.weight?.doubleValue || '0'),\n        leftReps: parseInt(logFields.leftReps?.integerValue || '0'),\n        leftWeight: parseFloat(logFields.leftWeight?.doubleValue || '0'),\n        isSplit: logFields.isSplit?.booleanValue || false,\n        isBodyWeight: logFields.isBodyWeight?.booleanValue || false,\n        duration: parseInt(logFields.duration?.integerValue || '0'),\n        calories: parseInt(logFields.calories?.integerValue || '0'),\n        bpm: parseInt(logFields.bpm?.integerValue || '0')\n      };\n    });\n\n    return {\n      id,\n      workoutId,\n      userId,\n      exercise,\n      logs,\n      feedback,\n      note,\n      recommendedWeight,\n      isSplit,\n      isBodyWeight,\n      logSubmitted,\n      logIsEditing,\n      createdAt: new Date(createdAtTimestamp * 1000),\n      updatedAt: new Date(updatedAtTimestamp * 1000)\n    };\n  }\n\n  private parseExercise(fields: any): Exercise {\n    // Implement this method based on your Swift parseExercise function\n    // This is a simplified version, you may need to add more details\n    return {\n      id: fields.id?.stringValue || '',\n      name: fields.name?.stringValue || '',\n      category: this.parseExerciseCategory(fields.category?.mapValue?.fields || {}),\n      primaryBodyParts: this.parseBodyParts(fields.primaryBodyParts),\n      secondaryBodyParts: this.parseBodyParts(fields.secondaryBodyParts),\n      tags: fields.tags?.arrayValue?.values?.map((tag: any) => tag.stringValue) || [],\n      description: fields.description?.stringValue || '',\n      visibility: fields.visibility?.arrayValue?.values?.map((v: any) => v.stringValue) || [],\n      steps: fields.steps?.arrayValue?.values?.map((step: any) => step.stringValue) || [],\n      videos: this.parseVideos(fields.videos),\n      currentVideoPosition: parseInt(fields.currentVideoPosition?.integerValue || '0'),\n      reps: fields.reps?.stringValue || '',\n      sets: parseInt(fields.sets?.integerValue || '0'),\n      weight: parseFloat(fields.weight?.doubleValue || '0'),\n      author: this.parseExerciseAuthor(fields.author?.mapValue?.fields || {}),\n      createdAt: new Date(parseFloat(fields.createdAt?.doubleValue || '0') * 1000),\n      updatedAt: new Date(parseFloat(fields.updatedAt?.doubleValue || '0') * 1000)\n    };\n  }\n\n  private parseExerciseCategory(fields: any): ExerciseCategory {\n    const categoryId = fields.id?.stringValue || '';\n    if (categoryId === 'cardio') {\n      return {\n        type: 'cardio',\n        details: {\n          duration: parseInt(fields.duration?.integerValue || '0'),\n          bpm: parseInt(fields.bpm?.integerValue || '0'),\n          calories: parseInt(fields.calories?.integerValue || '0')\n        }\n      };\n    } else {\n      return {\n        type: 'weightTraining',\n        details: {\n          reps: fields.reps?.stringValue || '',\n          sets: parseInt(fields.sets?.integerValue || '0'),\n          weight: parseFloat(fields.weight?.doubleValue || '0')\n        }\n      };\n    }\n  }\n\n  private parseBodyParts(bodyPartsField: any): BodyPart[] {\n    const bodyPartsArray = bodyPartsField?.arrayValue?.values || [];\n    return bodyPartsArray.map((part: any) => part.stringValue as BodyPart);\n  }\n\n  private parseVideos(videosField: any): ExerciseVideo[] {\n    const videosArray = videosField?.arrayValue?.values || [];\n    return videosArray.map((videoData: any) => this.parseExerciseVideo(videoData.mapValue?.fields || {}));\n  }\n  \n  private parseExerciseVideo(fields: any): ExerciseVideo {\n    return {\n      id: fields.id?.stringValue || '',\n      exerciseId: fields.exerciseId?.stringValue || '',\n      username: fields.username?.stringValue || '',\n      userId: fields.userId?.stringValue || '',\n      videoURL: fields.videoURL?.stringValue || '',\n      fileName: fields.fileName?.stringValue || '',\n      exercise: fields.exercise?.stringValue || '',\n      profileImage: this.parseProfileImage(fields.profileImage?.mapValue?.fields || {}),\n      caption: fields.caption?.stringValue || '',\n      gifURL: fields.gifURL?.stringValue || '',\n      thumbnail: fields.thumbnail?.stringValue || '',\n      visibility: fields.visibility?.stringValue || 'open',\n      totalAccountsReached: parseInt(fields.totalAccountsReached?.integerValue || '0'),\n      totalAccountLikes: parseInt(fields.totalAccountLikes?.integerValue || '0'),\n      totalAccountBookmarked: parseInt(fields.totalAccountBookmarked?.integerValue || '0'),\n      totalAccountUsage: parseInt(fields.totalAccountUsage?.integerValue || '0'),\n      comments: this.parseComments(fields.comments),\n      isApproved: fields.isApproved?.booleanValue || false,\n      liked: fields.liked?.booleanValue,\n      bookmarked: fields.bookmarked?.booleanValue,\n      createdAt: new Date(parseFloat(fields.createdAt?.doubleValue || '0') * 1000),\n      updatedAt: new Date(parseFloat(fields.updatedAt?.doubleValue || '0') * 1000)\n    };\n  }\n  \n  private parseProfileImage(fields: any): ProfileImage {\n    return {\n      profileImageURL: fields.profileImageURL?.stringValue || '',\n      imageOffsetWidth: parseFloat(fields.imageOffsetWidth?.doubleValue || '0'),\n      imageOffsetHeight: parseFloat(fields.imageOffsetHeight?.doubleValue || '0')\n    };\n  }\n  \n  private parseComments(commentsField: any): Comment[] {\n    const commentsArray = commentsField?.arrayValue?.values || [];\n    return commentsArray.map((commentData: any) => this.parseComment(commentData.mapValue?.fields || {}));\n  }\n  \n  private parseComment(fields: any): ExerciseComment {\n    return {\n      id: fields.id?.stringValue || '',\n      username: fields.username?.stringValue || '',\n      text: fields.text?.stringValue || '',\n      createdAt: new Date(parseFloat(fields.createdAt?.doubleValue || '0') * 1000),\n      updatedAt: new Date(parseFloat(fields.updatedAt?.doubleValue || '0') * 1000)\n    };\n  }\n\n  private parseExerciseAuthor(fields: any): ExerciseAuthor {\n    return {\n      userId: fields.userId?.stringValue || '',\n      username: fields.username?.stringValue || ''\n    };\n  }\n}\n\nexport default WorkoutService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
import React, { useState, useEffect, useCallback } from 'react';
import Head from 'next/head';
import AdminRouteGuard from '../../components/auth/AdminRouteGuard';
import { collection, getDocs, query, orderBy, where, getCountFromServer, doc, deleteDoc, writeBatch, getDoc } from 'firebase/firestore';
import { db } from '../../api/firebase/config';
import { Layers, Users, Calendar, AlertCircle, CheckCircle, Loader2, Eye, XCircle, Search, Filter, Trash2, Copy, Clock, Target } from 'lucide-react';
import { Workout } from '../../api/firebase/workout/types';
import { convertFirestoreTimestamp } from '../../utils/formatDate';

// Define interfaces for display
interface StackDisplay {
  id: string;
  title: string;
  description: string;
  author: string;
  exerciseCount: number;
  duration: number;
  zone: string;
  autoGenerated: boolean;
  sourceRoundId?: string;
  createdAt: Date;
  updatedAt: Date;
  userId?: string;
  // Raw workout data for detailed view
  workout?: Workout;
}

interface ExerciseLogDisplay {
  id: string;
  exerciseName: string;
  sets: number;
  reps: string[];
  weight?: number;
  screenTime?: number;
  order: number;
}

const StacksManagement: React.FC = () => {
  const [activeSubTab, setActiveSubTab] = useState<'allStacks' | 'userStacks' | 'aiStacks'>('allStacks');
  const [stacks, setStacks] = useState<StackDisplay[]>([]);
  const [filteredStacks, setFilteredStacks] = useState<StackDisplay[]>([]);
  const [loadingStacks, setLoadingStacks] = useState(true);
  const [totalStackCount, setTotalStackCount] = useState<number>(0);
  const [loadingTotalStackCount, setLoadingTotalStackCount] = useState(true);
  
  const [error, setError] = useState<string | null>(null);
  const [toastMessage, setToastMessage] = useState<{ type: 'success' | 'error' | 'info', text: string } | null>(null);

  const [selectedStack, setSelectedStack] = useState<StackDisplay | null>(null);
  const [stackExercises, setStackExercises] = useState<ExerciseLogDisplay[]>([]);
  const [loadingStackExercises, setLoadingStackExercises] = useState(false);

  const [deletingStacks, setDeletingStacks] = useState<{[stackId: string]: boolean}>({});

  // Search states
  const [stackSearchTerm, setStackSearchTerm] = useState('');
  const [authorFilter, setAuthorFilter] = useState('');
  const [zoneFilter, setZoneFilter] = useState('');
  const [exerciseSearchTerm, setExerciseSearchTerm] = useState('');

  // Show/hide toast
  useEffect(() => {
    if (toastMessage) {
      const timer = setTimeout(() => setToastMessage(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [toastMessage]);

  // Filter stacks based on search term, author, and zone
  useEffect(() => {
    let filtered = stacks;

    // Filter by tab
    if (activeSubTab === 'userStacks') {
      filtered = filtered.filter(stack => !stack.autoGenerated);
    } else if (activeSubTab === 'aiStacks') {
      filtered = filtered.filter(stack => stack.autoGenerated);
    }

    if (stackSearchTerm) {
      filtered = filtered.filter(stack =>
        stack.title.toLowerCase().includes(stackSearchTerm.toLowerCase()) ||
        stack.description.toLowerCase().includes(stackSearchTerm.toLowerCase()) ||
        stack.id.toLowerCase().includes(stackSearchTerm.toLowerCase())
      );
    }

    if (authorFilter) {
      filtered = filtered.filter(stack =>
        stack.author.toLowerCase().includes(authorFilter.toLowerCase())
      );
    }

    if (zoneFilter) {
      filtered = filtered.filter(stack =>
        stack.zone.toLowerCase().includes(zoneFilter.toLowerCase())
      );
    }

    setFilteredStacks(filtered);
  }, [stacks, stackSearchTerm, authorFilter, zoneFilter, activeSubTab]);

  // Helper function to fetch username by userId
  const fetchUsername = useCallback(async (userId: string): Promise<string> => {
    if (!userId) return 'Unknown';
    
    try {
      const userDoc = await getDoc(doc(db, 'users', userId));
      if (userDoc.exists()) {
        const userData = userDoc.data();
        return userData.username || userData.displayName || 'Unknown';
      }
      return 'Unknown';
    } catch (error) {
      console.error(`[StacksManagement] Error fetching username for ${userId}:`, error);
      return 'Unknown';
    }
  }, []);

  const fetchStacks = useCallback(async () => {
    console.log('[StacksManagement] Fetching stacks...');
    setLoadingStacks(true);
    setError(null);
    try {
      const stacksRef = collection(db, 'stacks');
      const q = query(stacksRef, orderBy('createdAt', 'desc'));
      const snapshot = await getDocs(q);
      
      const stacksWithUserIds = snapshot.docs.map(doc => {
        const data = doc.data();
        console.log('[StacksManagement] Fetched stack:', data);
        
        // Convert the raw data to a Workout object for processing
        const workout = new Workout(data);
        
        return {
          id: doc.id,
          title: data.title || 'Untitled Stack',
          description: data.description || '',
          author: data.authorUsername || 'Loading...', // Will be updated below if authorUsername is not available
          exerciseCount: data.exercises?.length || 0,
          duration: data.duration || data.estimatedDuration || 0,
          zone: data.zone || 'Unknown',
          autoGenerated: data.autoGenerated || false,
          sourceRoundId: data.sourceRoundId,
          createdAt: convertFirestoreTimestamp(data.createdAt),
          updatedAt: convertFirestoreTimestamp(data.updatedAt),
          userId: data.userId || data.author, // Store the actual userId for username lookup
          workout: workout,
          rawAuthor: data.author, // Keep the original author field for fallback
          hasAuthorUsername: !!data.authorUsername, // Track if we have the username already
        } as StackDisplay & { rawAuthor?: string; hasAuthorUsername?: boolean };
      });

      // For stacks that don't have authorUsername, fetch the username from users collection
      const stacksWithUsernames = await Promise.all(
        stacksWithUserIds.map(async (stack) => {
          if (!stack.hasAuthorUsername && stack.userId) {
            const username = await fetchUsername(stack.userId);
            return {
              ...stack,
              author: username,
            };
          }
          return stack;
        })
      );

      // Clean up the temporary fields
      const finalStacks = stacksWithUsernames.map(({ rawAuthor, hasAuthorUsername, ...stack }) => stack);

      setStacks(finalStacks);
      setFilteredStacks(finalStacks);
      console.log(`[StacksManagement] Fetched ${finalStacks.length} stacks.`);
    } catch (err) {
      console.error('[StacksManagement] Error fetching stacks:', err);
      setError(`Failed to load stacks. ${err instanceof Error ? err.message : 'Unknown error'}`);
      setStacks([]);
      setFilteredStacks([]);
    } finally {
      setLoadingStacks(false);
    }
  }, [fetchUsername]);

  const fetchTotalStackCount = useCallback(async () => {
    console.log('[StacksManagement] Fetching total stack count...');
    setLoadingTotalStackCount(true);
    try {
      const stacksRef = collection(db, 'stacks');
      const snapshot = await getCountFromServer(stacksRef);
      setTotalStackCount(snapshot.data().count);
      console.log(`[StacksManagement] Total stack count: ${snapshot.data().count}`);
    } catch (err) {
      console.error('[StacksManagement] Error fetching total stack count:', err);
      setTotalStackCount(0);
    } finally {
      setLoadingTotalStackCount(false);
    }
  }, []);

  useEffect(() => {
    fetchStacks();
    fetchTotalStackCount();
  }, [fetchStacks, fetchTotalStackCount]);

  const fetchStackExercises = useCallback(async (stackId: string) => {
    if (!stackId) {
      console.warn('[StacksManagement] fetchStackExercises called with invalid stackId.');
      setStackExercises([]);
      return;
    }
    console.log(`[StacksManagement] Fetching exercises for stack ID: ${stackId}`);
    setLoadingStackExercises(true);
    try {
      const logsRef = collection(db, 'stacks', stackId, 'logs');
      const q = query(logsRef, orderBy('order', 'asc'));
      const snapshot = await getDocs(q);
      
      const fetchedExercises = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          exerciseName: data.exercise?.name || 'Unknown Exercise',
          sets: data.sets?.length || 0,
          reps: data.sets?.map((set: any) => set.reps?.toString() || '0') || [],
          weight: data.sets?.[0]?.weight || 0,
          screenTime: data.exercise?.category?.screenTime || 0,
          order: data.order || 0,
        } as ExerciseLogDisplay;
      });
      
      setStackExercises(fetchedExercises);
      console.log(`[StacksManagement] Fetched ${fetchedExercises.length} exercises for stack ${stackId}.`);
    } catch (err) {
      console.error(`[StacksManagement] Error fetching exercises for stack ${stackId}:`, err);
      setToastMessage({ type: 'error', text: `Failed to load exercises. ${err instanceof Error ? err.message : ''}` });
      setStackExercises([]);
    } finally {
      setLoadingStackExercises(false);
    }
  }, []);

  const handleDeleteStack = async (stackId: string) => {
    if (!window.confirm("Are you sure you want to permanently delete this stack? This action cannot be undone.")) {
      return;
    }

    setDeletingStacks(prev => ({ ...prev, [stackId]: true }));
    setToastMessage({ type: 'info', text: 'Deleting stack...' });
    
    try {
      const batch = writeBatch(db);
      
      // Delete the main stack document
      const stackRef = doc(db, 'stacks', stackId);
      batch.delete(stackRef);
      
      // Delete all exercises in the logs subcollection
      const logsRef = collection(db, 'stacks', stackId, 'logs');
      const logsSnapshot = await getDocs(logsRef);
      logsSnapshot.docs.forEach(logDoc => {
        batch.delete(logDoc.ref);
      });
      
      await batch.commit();

      // Remove from state
      setStacks(prevStacks => prevStacks.filter(stack => stack.id !== stackId));
      setFilteredStacks(prevStacks => prevStacks.filter(stack => stack.id !== stackId));

      // Update total count
      setTotalStackCount(prev => Math.max(0, prev - 1));

      setToastMessage({ type: 'success', text: 'Stack deleted successfully.' });
    } catch (err) {
      console.error('[StacksManagement] Error deleting stack:', err);
      const errorMessage = err instanceof Error ? err.message : 'Unknown error.';
      setToastMessage({ type: 'error', text: `Failed to delete stack: ${errorMessage}` });
    } finally {
      setDeletingStacks(prev => ({ ...prev, [stackId]: false }));
    }
  };

  const handleCopyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setToastMessage({ type: 'success', text: `${label} copied to clipboard!` });
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      setToastMessage({ type: 'error', text: `Failed to copy ${label.toLowerCase()}` });
    }
  };

  // Format date helper
  const formatDate = (dateValue: any): string => {
    if (!dateValue) return 'N/A';
    try {
      const date = dateValue instanceof Date ? dateValue : new Date(dateValue);
      if (date instanceof Date && !isNaN(date.getTime())) {
        return date.toLocaleString();
      }
      return 'Invalid Date';
    } catch (e) {
      return 'Invalid Date';
    }
  };

  // Render Stack Exercises Modal
  const renderStackExerciseDetails = () => {
    if (!selectedStack) return null;

    return (
      <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4 animate-fade-in-up">
        <div className="bg-[#1a1e24] rounded-xl p-6 shadow-xl border border-[#d7ff00]/30 max-w-4xl w-full max-h-[90vh] flex flex-col">
          <div className="flex justify-between items-center mb-4 pb-4 border-b border-gray-700">
            <div className="flex items-center gap-3">
              <Layers className="h-6 w-6 text-[#d7ff00]" />
              <div>
                <h3 className="text-xl font-semibold text-white">Exercises in: {selectedStack.title}</h3>
                <p className="text-sm text-gray-400">({stackExercises.length} exercise{stackExercises.length !== 1 ? 's' : ''} found)</p>
              </div>
            </div>
            <button
              onClick={() => {
                setSelectedStack(null);
                setExerciseSearchTerm('');
              }}
              className="p-1 text-gray-400 hover:text-white transition"
              title="Close exercise view"
            >
              <XCircle className="h-6 w-6" />
            </button>
          </div>
          
          {/* Exercise Search */}
          <div className="mb-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search exercises by name..."
                value={exerciseSearchTerm}
                onChange={(e) => setExerciseSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 bg-[#262a30] border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#d7ff00] focus:border-transparent text-sm"
              />
            </div>
          </div>
          
          <div className="flex-grow overflow-y-auto pr-2">
            {loadingStackExercises ? (
              <div className="flex justify-center items-center py-10"><Loader2 className="h-8 w-8 text-[#d7ff00] animate-spin" /></div>
            ) : stackExercises.length === 0 ? (
              <div className="text-center py-10 text-gray-400">
                <Target className="h-10 w-10 mx-auto mb-3 text-gray-600" />
                <p>No exercises found for this stack.</p>
              </div>
            ) : (
              <div className="space-y-3">
                {stackExercises
                  .filter(exercise => 
                    !exerciseSearchTerm || 
                    exercise.exerciseName.toLowerCase().includes(exerciseSearchTerm.toLowerCase())
                  )
                  .map((exercise, index) => (
                    <div key={exercise.id} className="bg-[#262a30] rounded-lg p-4 border border-gray-700">
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex-1">
                          <h4 className="text-lg font-semibold text-white">{exercise.exerciseName}</h4>
                          <p className="text-sm text-gray-400">Exercise #{exercise.order || index + 1}</p>
                        </div>
                        <div className="text-right">
                          <p className="text-sm text-gray-300">{exercise.sets} set{exercise.sets !== 1 ? 's' : ''}</p>
                          {exercise.screenTime > 0 && (
                            <p className="text-xs text-blue-400 flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              {exercise.screenTime}s
                            </p>
                          )}
                        </div>
                      </div>
                      
                      {exercise.reps.length > 0 && (
                        <div className="mt-3">
                          <p className="text-xs text-gray-500 mb-2">Reps per set:</p>
                          <div className="flex flex-wrap gap-2">
                            {exercise.reps.map((rep, repIndex) => (
                              <span key={repIndex} className="px-2 py-1 bg-[#1a1e24] rounded text-xs text-gray-300">
                                Set {repIndex + 1}: {rep} reps
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {exercise.weight > 0 && (
                        <div className="mt-2">
                          <p className="text-xs text-gray-400">Weight: {exercise.weight} lbs</p>
                        </div>
                      )}
                    </div>
                  ))}
              </div>
            )}
          </div>
          
          <div className="mt-6 pt-4 border-t border-gray-700 flex justify-end">
            <button
              onClick={() => {
                setSelectedStack(null);
                setExerciseSearchTerm('');
              }}
              className="px-4 py-2 bg-gray-700/30 text-gray-300 rounded-lg text-sm font-medium border border-gray-700 hover:bg-gray-700/50 transition flex items-center"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <AdminRouteGuard>
      <Head>
        <title>Stacks Database | Pulse Admin</title>
        <style>{`
          @keyframes fadeInUp { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
          .animate-fade-in-up { animation: fadeInUp 0.3s ease-out forwards; }
        `}</style>
      </Head>

      <div className="min-h-screen bg-[#111417] text-white py-10 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold flex items-center">
              <Layers className="text-[#d7ff00] mr-3 h-7 w-7" />
              Stacks Database
            </h1>
          </div>

          {/* Metric Cards Row */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            {/* Total Stacks Card */}
            <div className="p-6 bg-[#262a30] rounded-xl border border-gray-700 shadow-lg">
              <h3 className="text-lg font-semibold mb-2 flex items-center gap-2 text-gray-300">
                <Layers className="text-[#d7ff00] h-5 w-5"/> Total Stacks
              </h3>
              {loadingTotalStackCount ? (
                <div className="h-10 w-24 bg-gray-700 rounded animate-pulse"></div>
              ) : (
                <p className="text-4xl font-bold text-[#d7ff00]">{totalStackCount}</p>
              )}
            </div>

            {/* User Created Stacks */}
            <div className="p-6 bg-[#262a30] rounded-xl border border-gray-700 shadow-lg">
              <h3 className="text-lg font-semibold mb-2 flex items-center gap-2 text-gray-300">
                <Users className="text-blue-400 h-5 w-5" /> User Created
              </h3>
              {loadingStacks ? (
                <div className="h-10 w-24 bg-gray-700 rounded animate-pulse"></div>
              ) : (
                <p className="text-4xl font-bold text-blue-400">{stacks.filter(s => !s.autoGenerated).length}</p>
              )}
            </div>

            {/* AI Generated Stacks */}
            <div className="p-6 bg-[#262a30] rounded-xl border border-gray-700 shadow-lg">
              <h3 className="text-lg font-semibold mb-2 flex items-center gap-2 text-gray-300">
                <Target className="text-purple-400 h-5 w-5" /> AI Generated
              </h3>
              {loadingStacks ? (
                <div className="h-10 w-24 bg-gray-700 rounded animate-pulse"></div>
              ) : (
                <p className="text-4xl font-bold text-purple-400">{stacks.filter(s => s.autoGenerated).length}</p>
              )}
            </div>
          </div>

          {/* Search and Filter Section */}
          <div className="mb-6 p-4 bg-[#262a30] rounded-xl border border-gray-700">
            <div className="space-y-4">
              <div className="flex items-center gap-2 mb-3">
                <Search className="h-5 w-5 text-[#d7ff00]" />
                <h3 className="text-lg font-semibold text-white">Search & Filter Stacks</h3>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Search by Title or ID</label>
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Enter stack title or ID..."
                      value={stackSearchTerm}
                      onChange={(e) => setStackSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-[#1a1e24] border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#d7ff00] focus:border-transparent"
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Filter by Author</label>
                  <div className="relative">
                    <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Enter username..."
                      value={authorFilter}
                      onChange={(e) => setAuthorFilter(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-[#1a1e24] border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#d7ff00] focus:border-transparent"
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Filter by Zone</label>
                  <div className="relative">
                    <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Enter body zone..."
                      value={zoneFilter}
                      onChange={(e) => setZoneFilter(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-[#1a1e24] border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#d7ff00] focus:border-transparent"
                    />
                  </div>
                </div>
              </div>
              {(stackSearchTerm || authorFilter || zoneFilter) && (
                <div className="flex items-center justify-between pt-2 border-t border-gray-600">
                  <p className="text-sm text-gray-400">
                    Showing {filteredStacks.length} of {stacks.length} stacks
                  </p>
                  <button
                    onClick={() => {
                      setStackSearchTerm('');
                      setAuthorFilter('');
                      setZoneFilter('');
                    }}
                    className="text-sm text-[#d7ff00] hover:text-[#b8d400] transition-colors"
                  >
                    Clear all filters
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Tab Navigation */}
          <div className="mb-6 border-b border-gray-700 flex space-x-1">
            <button 
              onClick={() => setActiveSubTab('allStacks')}
              className={`py-2 px-4 text-sm font-medium transition-colors rounded-t-md flex items-center gap-2 ${activeSubTab === 'allStacks' ? 'bg-[#262a30] text-[#d7ff00] border-x border-t border-gray-700' : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700/30'}`}
            >
              <Layers className="h-4 w-4" /> All Stacks
            </button>
            <button 
              onClick={() => setActiveSubTab('userStacks')}
              className={`py-2 px-4 text-sm font-medium transition-colors rounded-t-md flex items-center gap-2 ${activeSubTab === 'userStacks' ? 'bg-[#262a30] text-[#d7ff00] border-x border-t border-gray-700' : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700/30'}`}
            >
              <Users className="h-4 w-4" /> User Created
            </button>
            <button 
              onClick={() => setActiveSubTab('aiStacks')}
              className={`py-2 px-4 text-sm font-medium transition-colors rounded-t-md flex items-center gap-2 ${activeSubTab === 'aiStacks' ? 'bg-[#262a30] text-[#d7ff00] border-x border-t border-gray-700' : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700/30'}`}
            >
              <Target className="h-4 w-4" /> AI Generated
            </button>
          </div>

          {error && (
            <div className="bg-red-900/20 p-4 rounded-lg border border-red-800 text-red-300 flex items-center gap-3 mb-6">
              <AlertCircle className="h-5 w-5 flex-shrink-0" />
              <p>{error}</p>
            </div>
          )}

          {/* Stacks Table */}
          {loadingStacks ? (
            <div className="flex justify-center items-center py-20"><Loader2 className="h-10 w-10 text-[#d7ff00] animate-spin" /></div>
          ) : filteredStacks.length === 0 && stacks.length === 0 && !error ? (
            <div className="bg-[#1a1e24] p-8 rounded-lg border border-gray-700 text-center">
              <Layers className="h-12 w-12 mx-auto mb-4 text-gray-600" />
              <p className="text-gray-400 text-lg">No stacks found in the database.</p>
            </div>
          ) : filteredStacks.length === 0 && stacks.length > 0 ? (
            <div className="bg-[#1a1e24] p-8 rounded-lg border border-gray-700 text-center">
              <Search className="h-12 w-12 mx-auto mb-4 text-gray-600" />
              <p className="text-gray-400 text-lg">No stacks match your search criteria.</p>
              <p className="text-gray-500 text-sm mt-2">Try adjusting your search terms or filters.</p>
            </div>
          ) : (
            <div className="overflow-x-auto bg-[#1a1e24] rounded-xl shadow-xl border border-gray-800 rounded-t-none">
              <table className="min-w-full">
                <thead>
                  <tr className="border-b border-gray-700">
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Title</th>
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Author</th>
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Exercises</th>
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Zone</th>
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Duration</th>
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Type</th>
                    <th className="py-3 px-5 text-left text-xs text-gray-400 font-semibold uppercase tracking-wider">Created</th>
                    <th className="py-3 px-5 text-center text-xs text-gray-400 font-semibold uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-700">
                  {filteredStacks.map((stack) => (
                    <tr key={stack.id} className="hover:bg-[#20252c] transition-colors">
                      <td className="py-4 px-5">
                        <div>
                          <p className="text-sm text-white font-medium">{stack.title}</p>
                          {stack.description && (
                            <p className="text-xs text-gray-400 mt-1 truncate max-w-xs" title={stack.description}>
                              {stack.description}
                            </p>
                          )}
                        </div>
                      </td>
                      <td className="py-4 px-5 text-sm text-gray-300">{stack.author}</td>
                      <td className="py-4 px-5 text-center">
                        <button
                          onClick={() => {
                            setSelectedStack(stack);
                            fetchStackExercises(stack.id);
                          }}
                          className="px-2.5 py-1.5 rounded-md text-xs font-medium border bg-blue-900/40 text-blue-300 border-blue-800 hover:bg-blue-800/60 transition-colors flex items-center mx-auto gap-1.5"
                          title="View exercises in this stack"
                        >
                          <Eye className="h-3.5 w-3.5" />
                          {stack.exerciseCount}
                        </button>
                      </td>
                      <td className="py-4 px-5 text-sm text-gray-300">{stack.zone}</td>
                      <td className="py-4 px-5 text-sm text-gray-300">
                        {stack.duration > 0 ? `${stack.duration} min` : 'N/A'}
                      </td>
                      <td className="py-4 px-5 text-sm">
                        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                          stack.autoGenerated 
                            ? 'bg-purple-500/80 text-white' 
                            : 'bg-blue-500/80 text-white'
                        }`}>
                          {stack.autoGenerated ? 'AI Generated' : 'User Created'}
                        </span>
                      </td>
                      <td className="py-4 px-5 text-sm text-gray-400">{formatDate(stack.createdAt)}</td>
                      <td className="py-4 px-5 text-center">
                        <div className="flex items-center justify-center space-x-2">
                          <button
                            onClick={() => handleCopyToClipboard(stack.id, 'Stack ID')}
                            className="p-1.5 rounded-md transition-colors bg-gray-700/80 hover:bg-gray-600/80 text-white"
                            title="Copy stack ID"
                          >
                            <Copy className="h-4 w-4" />
                          </button>
                          <button
                            onClick={() => handleDeleteStack(stack.id)}
                            disabled={deletingStacks[stack.id]}
                            className={`p-1.5 rounded-md transition-colors ${
                              deletingStacks[stack.id]
                                ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                                : 'bg-red-700/80 hover:bg-red-600/80 text-white'
                            }`}
                            title="Delete stack permanently"
                          >
                            {deletingStacks[stack.id] ? <Loader2 className="h-4 w-4 animate-spin" /> : <Trash2 className="h-4 w-4" />}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Stack Exercises Modal */}
      {selectedStack && renderStackExerciseDetails()}

      {/* Toast Notification */}
      {toastMessage && (
        <div className={`fixed bottom-5 right-5 py-2.5 px-5 rounded-lg shadow-xl flex items-center gap-2.5 animate-fade-in-up z-[100] ${
          toastMessage.type === 'success' 
            ? 'bg-green-700/95 border border-green-600 text-white'
            : toastMessage.type === 'error'
              ? 'bg-red-700/95 border border-red-600 text-white'
              : 'bg-blue-700/95 border border-blue-600 text-white'
        }`}>
          {toastMessage.type === 'success' ? (
            <CheckCircle className="h-5 w-5" />
          ) : toastMessage.type === 'error' ? (
            <AlertCircle className="h-5 w-5" />
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"> <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z" clipRule="evenodd" /> </svg>
          )}
          <span className="text-sm font-medium">{toastMessage.text}</span>
        </div>
      )}
    </AdminRouteGuard>
  );
};

export default StacksManagement;
